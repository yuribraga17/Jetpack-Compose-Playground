{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jetpack Compose Playground \u00b6 Introduction \u00b6 This is a collection of Jetpack Compose examples/tutorials and demos. Show some and star the repo to support the project \u00b6 What is Jetpack Compose? \u00b6 \u201cJetpack Compose is a modern toolkit for building native Android UI. Jetpack Compose simplifies and accelerates UI development on Android with less code, powerful tools, and intuitive Kotlin APIs. \u201c Composable of the week!! \ud83c\udf89 \u00b6 The Card New to Compose? \u00b6 Check Project Setup or Hello World Compose Layouts \u00b6 ConstraintLayout Scaffold Column Row Stack Foundation \u00b6 Box Canvas Image LazyColumnFor LazyRowFor ScrollableRow ScrollableColumn Shape Text TextField Material \u00b6 AlertDialog Button Card Checkbox ModalDrawerLayout RadioGroup Scaffold Slider Snackbar Switch Looking for tutorials/sample code \u00b6 Take a look at the sidebar under \u201cGuides & Samples\u201d or check Compose projects Contributing \u00b6 Interested in adding samples/tutorials? Check Contributing \ud83d\udcdc License \u00b6 This project is licensed under the MIT License - see the LICENSE.md file for details","title":"Overview"},{"location":"#jetpack-compose-playground","text":"","title":"Jetpack Compose Playground"},{"location":"#introduction","text":"This is a collection of Jetpack Compose examples/tutorials and demos.","title":"Introduction"},{"location":"#show-some-and-star-the-repo-to-support-the-project","text":"","title":"Show some  and star the repo to support the project"},{"location":"#what-is-jetpack-compose","text":"\u201cJetpack Compose is a modern toolkit for building native Android UI. Jetpack Compose simplifies and accelerates UI development on Android with less code, powerful tools, and intuitive Kotlin APIs. \u201c","title":"What is Jetpack Compose?"},{"location":"#composable-of-the-week","text":"The Card","title":"Composable of the week!! \ud83c\udf89"},{"location":"#new-to-compose","text":"Check Project Setup or Hello World Compose","title":"New to Compose?"},{"location":"#layouts","text":"ConstraintLayout Scaffold Column Row Stack","title":"Layouts"},{"location":"#foundation","text":"Box Canvas Image LazyColumnFor LazyRowFor ScrollableRow ScrollableColumn Shape Text TextField","title":"Foundation"},{"location":"#material","text":"AlertDialog Button Card Checkbox ModalDrawerLayout RadioGroup Scaffold Slider Snackbar Switch","title":"Material"},{"location":"#looking-for-tutorialssample-code","text":"Take a look at the sidebar under \u201cGuides & Samples\u201d or check Compose projects","title":"Looking for tutorials/sample code"},{"location":"#contributing","text":"Interested in adding samples/tutorials? Check Contributing","title":"Contributing"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"\ud83d\udcdc License"},{"location":"community/","text":"Community \u00b6 Slack Bugtracker https://issuetracker.google.com/issues/new?component=612128 Stackoverflow","title":"Community"},{"location":"community/#community","text":"Slack Bugtracker https://issuetracker.google.com/issues/new?component=612128 Stackoverflow","title":"Community"},{"location":"compose_projects/","text":"Compose Projects \u00b6 A list of projects that are related to Jetpack Compose. If you want to add an entry, please edit the table and send PR. Example Apps \u00b6 Name Description Jetpack Compose Playground Collection of Jetpack Compose example code . Compose Pokedex Pokedex on Jetpack Compose. Compose Samples Repository This repository contains a set of individual Android Studio projects to help you learn about Compose in Android. PeopleInSpace Minimal Kotlin Multiplatform project using Jetpack Compose and SwiftUI ComposeClock Particle clock created with Jetpack Compose framework JetDelivery JetDelivery is a sample food delivery app, built with Jetpack Compose. Learn Jetpack Compose By Example This project contains various examples that show how you would do things the \u201cJetpack Compose\u201d way Libraries \u00b6 Name Description Showkase LShowkase is an annotation-processor based Android library that helps you organize, discover, search and visualize Jetpack Compose UI elements Decompose Lifecycle-aware components for Jetpack Compose with routing functionality Compose Router Routing functionality for Jetpack Compose with back stack Compose Glide Image Simple Glide library adaptation for Jetpack Compose. Compose Navigation Compose Backstack Simple composable for rendering transitions between backstacks. SwipeReveal-Compose A layout that you can swipe to show action buttons. Websites \u00b6 Name Description Compose.Academy Jetpackcompose.app","title":"Compose Projects"},{"location":"compose_projects/#compose-projects","text":"A list of projects that are related to Jetpack Compose. If you want to add an entry, please edit the table and send PR.","title":"Compose Projects"},{"location":"compose_projects/#example-apps","text":"Name Description Jetpack Compose Playground Collection of Jetpack Compose example code . Compose Pokedex Pokedex on Jetpack Compose. Compose Samples Repository This repository contains a set of individual Android Studio projects to help you learn about Compose in Android. PeopleInSpace Minimal Kotlin Multiplatform project using Jetpack Compose and SwiftUI ComposeClock Particle clock created with Jetpack Compose framework JetDelivery JetDelivery is a sample food delivery app, built with Jetpack Compose. Learn Jetpack Compose By Example This project contains various examples that show how you would do things the \u201cJetpack Compose\u201d way","title":"Example Apps"},{"location":"compose_projects/#libraries","text":"Name Description Showkase LShowkase is an annotation-processor based Android library that helps you organize, discover, search and visualize Jetpack Compose UI elements Decompose Lifecycle-aware components for Jetpack Compose with routing functionality Compose Router Routing functionality for Jetpack Compose with back stack Compose Glide Image Simple Glide library adaptation for Jetpack Compose. Compose Navigation Compose Backstack Simple composable for rendering transitions between backstacks. SwipeReveal-Compose A layout that you can swipe to show action buttons.","title":"Libraries"},{"location":"compose_projects/#websites","text":"Name Description Compose.Academy Jetpackcompose.app","title":"Websites"},{"location":"contributing/","text":"Contributing \u00b6 to Jetpack Compose \u00b6 If you want to improve Compose, join the Kotlin Slack and the #compose channel or file a bug at https://issuetracker.google.com/issues?q=componentid:612128 to this project \u00b6 This project is using MkDocs to generate the pages for Github. The markdown files are located in /mkdocs . The generated files for the github page are in /docs . Do not make changes in this folder, they will be overriden Run docs locally To start the mkdocs server locally, run mkdocs serve in a terminal in the project folder. pip3 install mkdocs-minify-plugin pip3 install mkdocs-git-revision-date-localized-plugin Add/Change docs The docs are written in markdown files which are all in /mkdocs . To change the navigation sidebar, you need to edit the mkdocs.yml. When you run mkdocs build in a terminal in the project folder, the html files be generated to /docs Feel free to change/add files and send a pull request.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#to-jetpack-compose","text":"If you want to improve Compose, join the Kotlin Slack and the #compose channel or file a bug at https://issuetracker.google.com/issues?q=componentid:612128","title":"to Jetpack Compose"},{"location":"contributing/#to-this-project","text":"This project is using MkDocs to generate the pages for Github. The markdown files are located in /mkdocs . The generated files for the github page are in /docs . Do not make changes in this folder, they will be overriden Run docs locally To start the mkdocs server locally, run mkdocs serve in a terminal in the project folder. pip3 install mkdocs-minify-plugin pip3 install mkdocs-git-revision-date-localized-plugin Add/Change docs The docs are written in markdown files which are all in /mkdocs . To change the navigation sidebar, you need to edit the mkdocs.yml. When you run mkdocs build in a terminal in the project folder, the html files be generated to /docs Feel free to change/add files and send a pull request.","title":"to this project"},{"location":"resources/","text":"Resources \u00b6 Content \u00b6 Official Documentation Other Documentation Conference talks Articles SpeakerDeck Podcasts Tutorials Extras Official Documentation \u00b6 Jetpack compose Jetpack compose Readme Other Documentation \u00b6 FAQ about Jetpack Compose \u2013 Android\u2019s modern toolkit for building native UI This Wiki Talks \u00b6 Thinking in Compose Compose by example Compose for existing apps Jetpack Compose droidcon Online 2020: Become A Composer By Brian Gardner Android Developers Backstage : Episode 131: Jetpack Compose and Declarative UIs KotlinConf 2019: The Compose Runtime, Demystified by Leland Richardson KotlinConf 2019: Compose Yourself: Designing a Kotlin First UI Toolkit by Anna-Chiara & Clara What\u2019s New in Jetpack Compose (Android Dev Summit \u201819) Understanding Compose (Android Dev Summit \u201819) #AskAndroid at Android Dev Summit 2019 - Jetpack Compose Google IO19 - Declarative UI patterns DroidconBerlin - Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android DroidconBerlin - Jumping into Jetpack Compose way too early to see what\u2019s inside KotlinEverywhere - Jetpack Compose DevFest Kolkata 2019 - Let\u2019s Talk Composing UI Articles \u00b6 Diving into Jetpack Compose Compose From First Principles Writing Android UI Code in Jetpack Compose (1 of 2) Jetpack Compose: Optimism and Opportunity Android Jetpack Compose Review SwiftUI vs. Jetpack Compose Android Jetpack Compose First Impression SpeakerDeck \u00b6 Jetpack @Compose Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android Shifting Paradigms Podcasts \u00b6 Android Developer backstage - Episode 147: Jetpack Compose Alpha Android Developer backstage - Episode 115: Jetpack Compose Fragmented Podcast - Episode 171: Jetpack Compose with Leland Richardson Google podcast - Romain Guy \u2013 Podcast S09 E09 Tutorials \u00b6 Raywenderlich - Jetpack Compose Primer Extras \u00b6 Video - Kotlin and Jetpack Compose #compose channel on Kotlin Slack Feel free to contribute! What is Jetpack Compose \u00b6 Links: * Jetpack Compose Tutorial Compose Readme Compose from first Principles AndroidX Git Compose: https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/ Compse UI Docu: https://developer.android.com/reference/kotlin/androidx/ui/packages https://developer.android.com/jetpack/compose/setup https://developer.android.com/jetpack/compose Release Notes: https://developer.android.com/jetpack/androidx/releases/ui","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#content","text":"Official Documentation Other Documentation Conference talks Articles SpeakerDeck Podcasts Tutorials Extras","title":"Content"},{"location":"resources/#official-documentation","text":"Jetpack compose Jetpack compose Readme","title":"Official Documentation"},{"location":"resources/#other-documentation","text":"FAQ about Jetpack Compose \u2013 Android\u2019s modern toolkit for building native UI This Wiki","title":"Other Documentation"},{"location":"resources/#talks","text":"Thinking in Compose Compose by example Compose for existing apps Jetpack Compose droidcon Online 2020: Become A Composer By Brian Gardner Android Developers Backstage : Episode 131: Jetpack Compose and Declarative UIs KotlinConf 2019: The Compose Runtime, Demystified by Leland Richardson KotlinConf 2019: Compose Yourself: Designing a Kotlin First UI Toolkit by Anna-Chiara & Clara What\u2019s New in Jetpack Compose (Android Dev Summit \u201819) Understanding Compose (Android Dev Summit \u201819) #AskAndroid at Android Dev Summit 2019 - Jetpack Compose Google IO19 - Declarative UI patterns DroidconBerlin - Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android DroidconBerlin - Jumping into Jetpack Compose way too early to see what\u2019s inside KotlinEverywhere - Jetpack Compose DevFest Kolkata 2019 - Let\u2019s Talk Composing UI","title":"Talks"},{"location":"resources/#articles","text":"Diving into Jetpack Compose Compose From First Principles Writing Android UI Code in Jetpack Compose (1 of 2) Jetpack Compose: Optimism and Opportunity Android Jetpack Compose Review SwiftUI vs. Jetpack Compose Android Jetpack Compose First Impression","title":"Articles"},{"location":"resources/#speakerdeck","text":"Jetpack @Compose Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android Shifting Paradigms","title":"SpeakerDeck"},{"location":"resources/#podcasts","text":"Android Developer backstage - Episode 147: Jetpack Compose Alpha Android Developer backstage - Episode 115: Jetpack Compose Fragmented Podcast - Episode 171: Jetpack Compose with Leland Richardson Google podcast - Romain Guy \u2013 Podcast S09 E09","title":"Podcasts"},{"location":"resources/#tutorials","text":"Raywenderlich - Jetpack Compose Primer","title":"Tutorials"},{"location":"resources/#extras","text":"Video - Kotlin and Jetpack Compose #compose channel on Kotlin Slack Feel free to contribute!","title":"Extras"},{"location":"resources/#what-is-jetpack-compose","text":"Links: * Jetpack Compose Tutorial Compose Readme Compose from first Principles AndroidX Git Compose: https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/ Compse UI Docu: https://developer.android.com/reference/kotlin/androidx/ui/packages https://developer.android.com/jetpack/compose/setup https://developer.android.com/jetpack/compose Release Notes: https://developer.android.com/jetpack/androidx/releases/ui","title":"What is Jetpack Compose"},{"location":"animation/transistion/","text":"Transistion \u00b6 WORK IN PROGRESS Working with Transistion \u00b6 Your browser does not support the video tag. What will we build? \u00b6 This is might not be a spectacutlar use case for Transistion, but it should give an idea, how to use Transistion. This is example consist of a Text which will print the active value of the Transition state and a padding which will change depending on this state. The value of the Transistion state will change from 0 to 200 over and over again. Create a transistion definition \u00b6 Transistion requires a TransitionDefinition, so let\u2019s build that first. private val paddingTransitionDefinition = transitionDefinition { ... } Inside the TransitionDefinition, we have to define all possible transition states and which transition should be used between two transition states. In this example we want to create transition between 0 and 200, so let\u2019s create two states for that. private val paddingPropKey = FloatPropKey () private val paddingTransitionDefinition = transitionDefinition { state ( \"A\" ){ this [ paddingPropKey ] = 0f } state ( \"B\" ) { this [ paddingPropKey ] = 200f } ... } Inside transitionDefinition you have to use the state() to define a transition state. It requires a name and a function to initialize a state. paddingPropKey is a FloatPropKey , it\u2019s like a state with a float value. It will be constantly updated with the latest value inside the transition. Now we have two states. One with the Name A and a paddingPropKey value of 0f and one with the Name B and a paddingPropKey value of 200f . Next we have to define a transistion between A and B . private val paddingPropKey = FloatPropKey () private val paddingTransitionDefinition = transitionDefinition { state ( \"A\" ){ this [ paddingPropKey ] = 0f } state ( \"B\" ) { this [ paddingPropKey ] = 200f } transition ( \"A\" to \"B\" ) { paddingPropKey using repeatable { animation = tween { duration = 1000 easing = FastOutLinearInEasing } iterations = Infinite } } } With transition ( \"A\" to \"B\" ) a transistion between state A and state B is definied. Inside the transition you have to define how , how long and how often the transition should happen. paddingPropKey using repeatable","title":"Transistion"},{"location":"animation/transistion/#transistion","text":"WORK IN PROGRESS","title":"Transistion"},{"location":"animation/transistion/#working-with-transistion","text":"Your browser does not support the video tag.","title":"Working with Transistion"},{"location":"animation/transistion/#what-will-we-build","text":"This is might not be a spectacutlar use case for Transistion, but it should give an idea, how to use Transistion. This is example consist of a Text which will print the active value of the Transition state and a padding which will change depending on this state. The value of the Transistion state will change from 0 to 200 over and over again.","title":"What will we build?"},{"location":"animation/transistion/#create-a-transistion-definition","text":"Transistion requires a TransitionDefinition, so let\u2019s build that first. private val paddingTransitionDefinition = transitionDefinition { ... } Inside the TransitionDefinition, we have to define all possible transition states and which transition should be used between two transition states. In this example we want to create transition between 0 and 200, so let\u2019s create two states for that. private val paddingPropKey = FloatPropKey () private val paddingTransitionDefinition = transitionDefinition { state ( \"A\" ){ this [ paddingPropKey ] = 0f } state ( \"B\" ) { this [ paddingPropKey ] = 200f } ... } Inside transitionDefinition you have to use the state() to define a transition state. It requires a name and a function to initialize a state. paddingPropKey is a FloatPropKey , it\u2019s like a state with a float value. It will be constantly updated with the latest value inside the transition. Now we have two states. One with the Name A and a paddingPropKey value of 0f and one with the Name B and a paddingPropKey value of 200f . Next we have to define a transistion between A and B . private val paddingPropKey = FloatPropKey () private val paddingTransitionDefinition = transitionDefinition { state ( \"A\" ){ this [ paddingPropKey ] = 0f } state ( \"B\" ) { this [ paddingPropKey ] = 200f } transition ( \"A\" to \"B\" ) { paddingPropKey using repeatable { animation = tween { duration = 1000 easing = FastOutLinearInEasing } iterations = Infinite } } } With transition ( \"A\" to \"B\" ) a transistion between state A and state B is definied. Inside the transition you have to define how , how long and how often the transition should happen. paddingPropKey using repeatable","title":"Create a transistion definition"},{"location":"compose_for/android_devs/","text":"Compose for Android Developers \u00b6 This page is inspired by https://flutter.dev/docs/get-started/flutter-for/android-devs . The goal is to show how common use cases with the classic Android View system, can be done with Compose. Layouts \u00b6 What is the equivalent of a LinearLayout? \u00b6 In Android, a LinearLayout is used to lay your widgets out linearly\u2014either horizontally or vertically. With Compose, use the Row or Column composable to achieve the same result. If you notice the two code samples are identical with the exception of the \u201cRow\u201d and \u201cColumn\u201d composable. The children are the same and this feature can be exploited to develop rich layouts that can change overtime with the same children. @Composable fun Example () { Row { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } @Composable fun Example () { Column { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } What is the equivalent of a RelativeLayout? \u00b6 A RelativeLayout lays your widgets out relative to each other. In Compose, there are a few ways to achieve the same result. You can achieve the result of a RelativeLayout by using a combination of Column, Row, and Stack widgets What is the equivalent of a ScrollView? \u00b6 In Android, use a ScrollView to lay out your widgets\u2014if the user\u2019s device has a smaller screen than your content, it scrolls. In Compose, you can use a ScrollableColumn @Composable fun ScrollableColumnExample () { ScrollableColumn { //Only one child is allowed in a ScrollableColumn Column { for ( i in 0. . 100 ) { Text ( \"$i Hello World!\" , style =( MaterialTheme . typography ()). body1 ) } } } } What is the equivalent of a RecyclerView? \u00b6 In Compose, you can use a LazyColumnFor or LazyRowFor . What is the equivalent of wrap_content? \u00b6 In the classic Android View system you use wrap_content to set the height/width of a View to the minimun needed value. In Compose, you can set a Modifier: Modifier.wrapContentWidth() \u00b6 Android View equivalent -> android:layout_width=\u201dwrap_content\u201d Modifier.wrapContentHeight() \u00b6 Android View equivalent ->android:layout_height=\u201dwrap_content\u201d Modifier.wrapContentSize() \u00b6 Android View equivalent ->android:layout_height=\u201dwrap_content\u201d Android View equivalent -> android:layout_width=\u201dwrap_content\u201d @Composable fun Example () { Row { Text ( \"Text1\" , modifier = Modifier . wrapContentWidth ()) Text ( \"Text2\" , modifier = Modifier . wrapContentHeight ()) } } Working with Text \u00b6 What is the equivalent of a TextView? \u00b6 In Compose you can use a Text to display text What is the equivalent of a EditText? \u00b6 The EditText is the standard text entry view in the Android View system. If the user needs to enter text into an app, this is the primary way for them to do that. In Compose you can use TextField","title":"Compose for Android Developers"},{"location":"compose_for/android_devs/#compose-for-android-developers","text":"This page is inspired by https://flutter.dev/docs/get-started/flutter-for/android-devs . The goal is to show how common use cases with the classic Android View system, can be done with Compose.","title":"Compose for Android Developers"},{"location":"compose_for/android_devs/#layouts","text":"","title":"Layouts"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-linearlayout","text":"In Android, a LinearLayout is used to lay your widgets out linearly\u2014either horizontally or vertically. With Compose, use the Row or Column composable to achieve the same result. If you notice the two code samples are identical with the exception of the \u201cRow\u201d and \u201cColumn\u201d composable. The children are the same and this feature can be exploited to develop rich layouts that can change overtime with the same children. @Composable fun Example () { Row { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } @Composable fun Example () { Column { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } }","title":"What is the equivalent of a LinearLayout?"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-relativelayout","text":"A RelativeLayout lays your widgets out relative to each other. In Compose, there are a few ways to achieve the same result. You can achieve the result of a RelativeLayout by using a combination of Column, Row, and Stack widgets","title":"What is the equivalent of a RelativeLayout?"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-scrollview","text":"In Android, use a ScrollView to lay out your widgets\u2014if the user\u2019s device has a smaller screen than your content, it scrolls. In Compose, you can use a ScrollableColumn @Composable fun ScrollableColumnExample () { ScrollableColumn { //Only one child is allowed in a ScrollableColumn Column { for ( i in 0. . 100 ) { Text ( \"$i Hello World!\" , style =( MaterialTheme . typography ()). body1 ) } } } }","title":"What is the equivalent of a ScrollView?"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-recyclerview","text":"In Compose, you can use a LazyColumnFor or LazyRowFor .","title":"What is the equivalent of a RecyclerView?"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-wrap_content","text":"In the classic Android View system you use wrap_content to set the height/width of a View to the minimun needed value. In Compose, you can set a Modifier:","title":"What is the equivalent of wrap_content?"},{"location":"compose_for/android_devs/#modifierwrapcontentwidth","text":"Android View equivalent -> android:layout_width=\u201dwrap_content\u201d","title":"Modifier.wrapContentWidth()"},{"location":"compose_for/android_devs/#modifierwrapcontentheight","text":"Android View equivalent ->android:layout_height=\u201dwrap_content\u201d","title":"Modifier.wrapContentHeight()"},{"location":"compose_for/android_devs/#modifierwrapcontentsize","text":"Android View equivalent ->android:layout_height=\u201dwrap_content\u201d Android View equivalent -> android:layout_width=\u201dwrap_content\u201d @Composable fun Example () { Row { Text ( \"Text1\" , modifier = Modifier . wrapContentWidth ()) Text ( \"Text2\" , modifier = Modifier . wrapContentHeight ()) } }","title":"Modifier.wrapContentSize()"},{"location":"compose_for/android_devs/#working-with-text","text":"","title":"Working with Text"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-textview","text":"In Compose you can use a Text to display text","title":"What is the equivalent of a TextView?"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-edittext","text":"The EditText is the standard text entry view in the Android View system. If the user needs to enter text into an app, this is the primary way for them to do that. In Compose you can use TextField","title":"What is the equivalent of a EditText?"},{"location":"compose_for/swiftui_devs/","text":"Compose for SwiftUI Developers \u00b6 SwiftUi Compose Button Button Text Text TextField TextField Image Image HStack Row VStack Column ZStack Stack LazyVStack LazyColumnFor LazyHStack LazyRowFor ScrollView ScrollableRow/ScrollableColumn What is the equivalent of a View? \u00b6 In \u201cJetpack Compose\u201d Views are called Composable . They are Kotlin functions that are annotated with @Composable. @Composable fun ComposableDemo (){ Text ( \"Hello, World\" ) } How to define a state? \u00b6 In SwiftUI you can use the @State property wrapper to create a state. //SwiftUI @ State var isActiveState = false In Compose you use mutableStateOf() //Compose var isActiveState = mutableStateOf ( false ) But this will only create the state. When you want to remember the value of your state in every recomposition, you have to put your state inside remember //Compose val isActiveState = remember { mutableStateOf ( false ) } What is the equivalent of a ViewModifier? \u00b6 //SwiftUI struct ContentView : View { var body : some View { Text ( \"Hello, World!\" ). background ( Color . Red ). padding ( 100 ) } } In Compose a ViewModifier is called Modifier . You can\u2019t directly append it to a View, you need to apply your modifier as a parameter to a Composable that expects a modifier. //Compose Text ( \"Hello, World\" , modifier = Modifier . background ( Color . Red ). padding ( 100. dp ))","title":"Compose for SwiftUI Developers"},{"location":"compose_for/swiftui_devs/#compose-for-swiftui-developers","text":"SwiftUi Compose Button Button Text Text TextField TextField Image Image HStack Row VStack Column ZStack Stack LazyVStack LazyColumnFor LazyHStack LazyRowFor ScrollView ScrollableRow/ScrollableColumn","title":"Compose for SwiftUI Developers"},{"location":"compose_for/swiftui_devs/#what-is-the-equivalent-of-a-view","text":"In \u201cJetpack Compose\u201d Views are called Composable . They are Kotlin functions that are annotated with @Composable. @Composable fun ComposableDemo (){ Text ( \"Hello, World\" ) }","title":"What is the equivalent of a View?"},{"location":"compose_for/swiftui_devs/#how-to-define-a-state","text":"In SwiftUI you can use the @State property wrapper to create a state. //SwiftUI @ State var isActiveState = false In Compose you use mutableStateOf() //Compose var isActiveState = mutableStateOf ( false ) But this will only create the state. When you want to remember the value of your state in every recomposition, you have to put your state inside remember //Compose val isActiveState = remember { mutableStateOf ( false ) }","title":"How to define a state?"},{"location":"compose_for/swiftui_devs/#what-is-the-equivalent-of-a-viewmodifier","text":"//SwiftUI struct ContentView : View { var body : some View { Text ( \"Hello, World!\" ). background ( Color . Red ). padding ( 100 ) } } In Compose a ViewModifier is called Modifier . You can\u2019t directly append it to a View, you need to apply your modifier as a parameter to a Composable that expects a modifier. //Compose Text ( \"Hello, World\" , modifier = Modifier . background ( Color . Red ). padding ( 100. dp ))","title":"What is the equivalent of a ViewModifier?"},{"location":"cookbook/detect_darkmode/","text":"How to detect dark mode \u00b6 Info This is the API of version alpha02. Newer versions may have a different one Inside your composable you can use isSystemInDarkTheme to detect if the device is running in dark mode. val dark = isSystemInDarkTheme () See also: \u00b6 Official Docs Learn-Jetpack-Compose-By-Example/DarkModeActivity","title":"How to detect dark mode"},{"location":"cookbook/detect_darkmode/#how-to-detect-dark-mode","text":"Info This is the API of version alpha02. Newer versions may have a different one Inside your composable you can use isSystemInDarkTheme to detect if the device is running in dark mode. val dark = isSystemInDarkTheme ()","title":"How to detect dark mode"},{"location":"cookbook/detect_darkmode/#see-also","text":"Official Docs Learn-Jetpack-Compose-By-Example/DarkModeActivity","title":"See also:"},{"location":"cookbook/get_android_context/","text":"Info This is the API of version alpha02. Newer versions may have a different one You can use ContextAmbient.current to receive the context of your Android App inside a Compose Function @Composable fun AndroidContextComposeDemo () { Text ( \"Read this string from Context: \" + ContextAmbient . current . getString ( R . string . app_name )) }","title":"How to get Android Context"},{"location":"cookbook/hint_edit_text/","text":"How to show hint with underline in a TextField \u00b6 Info This is the API of version dev08. Newer versions may have a different one We have all used EditText in classic Android development. It has lots of features like hint showing or default underline background. In Jetpack compose it\u2019s name is TextField and we set up it like that. Create TextField \u00b6 val state = state { \"\" } TextField ( value = state . value , modifier = modifier , onValueChange = { state . value = it }, textStyle = yourTextStyle ) With textStyle parameter you can change your TextField\u2019s font, font size, color and many other things, but there are something that its missing, you cant quite set its PlaceHolder text(Hint). So how can we do that? If you think about that hint\u2019s only purpose is to be shown when TextField is empty and be hidden when we are starting to type something in TextField. So we need two views one Text for hint showing and one TextField. They must have same location on the screen so it will look like same component. So without further ado let\u2019s start implementing it. Create HintTextField \u00b6 @Composable fun HintEditText ( hintText : String = \"\" , modifier : Modifier = Modifier . None , textStyle : TextStyle = currentTextStyle () ) { val state = state { \"\" } val inputField = @Composable { TextField ( value = state . value , modifier = modifier , onValueChange = { state . value = it }, textStyle = textStyle . merge ( TextStyle ( textDecoration = TextDecoration . None )) ) } Layout ( children = @Composable { inputField () Text ( text = hintText , modifier = modifier , style = textStyle . merge ( TextStyle ( color = Color . Gray )) ) Divider ( color = Color . Black , height = 2. dp ) }, measureBlock = { measurables : List < Measurable >, constraints : Constraints , _ -> val inputFieldPlace = measurables [ 0 ]. measure ( constraints ) val hintEditPlace = measurables [ 1 ]. measure ( constraints ) val dividerEditPlace = measurables [ 2 ]. measure ( Constraints ( constraints . minWidth , constraints . maxWidth , 2. ipx , 2. ipx ) ) layout ( inputFieldPlace . width , inputFieldPlace . height + dividerEditPlace . height ) { inputFieldPlace . place ( 0. ipx , 0. ipx ) if ( state . value . isEmpty ()) hintEditPlace . place ( 0. ipx , 0. ipx ) dividerEditPlace . place ( 0. ipx , inputFieldPlace . height ) } }) } Seems like lots of code for simple functional, doesn\u2019t it? Let\u2019s describe whats happening from the function declaration. It has three function parameters and they are pretty self-explanatory. As second part we are creating TextField lambda and passing it in Layout Composable function, with our HintText and Divider, which as you might have guessed will create underline background. Now it\u2019s time to decide where we are going to put our HintTextField. First of all we need to measure our views and measureBlock will help us do that. Measurables list will contain three items(Our TextField, HintText and Divider) as Measurable type, we need to call measure on all of list items and pass constraints in it. Constraints is a class which only has four properties(minWidth, maxWidth, minHeight, maxHeight). We can pass constraints which is given to us by measuring @Composable children lambda, which works with our TextField and HintText because we want them to have same size as it\u2019s parent, but when it comes to underline background we need it to stay as thin as possible. Now we are measuring our HintTextField one more time and placing it\u2019s children on some (x, y). One last thing to realize is that if our state value is not empty we don\u2019t place our HintText at all!","title":"How to create HintTextField"},{"location":"cookbook/hint_edit_text/#how-to-show-hint-with-underline-in-a-textfield","text":"Info This is the API of version dev08. Newer versions may have a different one We have all used EditText in classic Android development. It has lots of features like hint showing or default underline background. In Jetpack compose it\u2019s name is TextField and we set up it like that.","title":"How to show hint with underline in a TextField"},{"location":"cookbook/hint_edit_text/#create-textfield","text":"val state = state { \"\" } TextField ( value = state . value , modifier = modifier , onValueChange = { state . value = it }, textStyle = yourTextStyle ) With textStyle parameter you can change your TextField\u2019s font, font size, color and many other things, but there are something that its missing, you cant quite set its PlaceHolder text(Hint). So how can we do that? If you think about that hint\u2019s only purpose is to be shown when TextField is empty and be hidden when we are starting to type something in TextField. So we need two views one Text for hint showing and one TextField. They must have same location on the screen so it will look like same component. So without further ado let\u2019s start implementing it.","title":"Create TextField"},{"location":"cookbook/hint_edit_text/#create-hinttextfield","text":"@Composable fun HintEditText ( hintText : String = \"\" , modifier : Modifier = Modifier . None , textStyle : TextStyle = currentTextStyle () ) { val state = state { \"\" } val inputField = @Composable { TextField ( value = state . value , modifier = modifier , onValueChange = { state . value = it }, textStyle = textStyle . merge ( TextStyle ( textDecoration = TextDecoration . None )) ) } Layout ( children = @Composable { inputField () Text ( text = hintText , modifier = modifier , style = textStyle . merge ( TextStyle ( color = Color . Gray )) ) Divider ( color = Color . Black , height = 2. dp ) }, measureBlock = { measurables : List < Measurable >, constraints : Constraints , _ -> val inputFieldPlace = measurables [ 0 ]. measure ( constraints ) val hintEditPlace = measurables [ 1 ]. measure ( constraints ) val dividerEditPlace = measurables [ 2 ]. measure ( Constraints ( constraints . minWidth , constraints . maxWidth , 2. ipx , 2. ipx ) ) layout ( inputFieldPlace . width , inputFieldPlace . height + dividerEditPlace . height ) { inputFieldPlace . place ( 0. ipx , 0. ipx ) if ( state . value . isEmpty ()) hintEditPlace . place ( 0. ipx , 0. ipx ) dividerEditPlace . place ( 0. ipx , inputFieldPlace . height ) } }) } Seems like lots of code for simple functional, doesn\u2019t it? Let\u2019s describe whats happening from the function declaration. It has three function parameters and they are pretty self-explanatory. As second part we are creating TextField lambda and passing it in Layout Composable function, with our HintText and Divider, which as you might have guessed will create underline background. Now it\u2019s time to decide where we are going to put our HintTextField. First of all we need to measure our views and measureBlock will help us do that. Measurables list will contain three items(Our TextField, HintText and Divider) as Measurable type, we need to call measure on all of list items and pass constraints in it. Constraints is a class which only has four properties(minWidth, maxWidth, minHeight, maxHeight). We can pass constraints which is given to us by measuring @Composable children lambda, which works with our TextField and HintText because we want them to have same size as it\u2019s parent, but when it comes to underline background we need it to stay as thin as possible. Now we are measuring our HintTextField one more time and placing it\u2019s children on some (x, y). One last thing to realize is that if our state value is not empty we don\u2019t place our HintText at all!","title":"Create HintTextField"},{"location":"cookbook/how_to_use_an_android_view_in_compose/","text":"How to use an Android View in Compose \u00b6 Info This is the API of version dev16. Newer versions may have a different one Altough Compose itself is independent from the classic Android View system, in Android Apps it is possible to use Views(any class extends android.view.View) inside of Compose. This example will show you, how you can use a android.widget.Button , an android.widget.TextView and an android.widget.ImageView alongside with an Compose Button. In the example above you can see a @Composable() with a Column and a counter state. The ImageView is loading an drawable. The compose button and the wiget.Button will both update the counter and the TextView will display the value of counter. See below how emitView() is working. @Composable fun embeddedAndroidViewDemo () { Column { val state = state { 0 } //widget.ImageView emitView ( ctor = { ctx -> ImageView ( ctx ). apply { val drawable = ContextCompat . getDrawable ( ctx , R . drawable . ic_launcher_background ) setImageDrawable ( drawable ) } }, update = {}) //Compose Button Button ( onClick = { state . value ++ }) { Text ( \"MyComposeButton\" ) } //widget.Button emitView ( ctor = { ctx -> //Here you can construct your View Button ( ctx ). apply { text = \"MyAndroidButton\" layoutParams = LinearLayout . LayoutParams ( MATCH_PARENT , WRAP_CONTENT ) setOnClickListener { state . value ++ } } }, update = { }) //widget.TextView emitView ( ctor = { ctx -> //Here you can construct your View TextView ( ctx ). apply { layoutParams = LinearLayout . LayoutParams ( MATCH_PARENT , WRAP_CONTENT ) } }, update = { it . text = \"You have clicked the buttons: \" + state . value . toString () + \" times\" }) } } EmitView \u00b6 //androidx.compose.ui.viewinterop @Composable fun < T : View > emitView ( ctor : ( Context ) -> T , update : ( T ) -> Unit ) { val context = ContextAmbient . current emit < T , UiApplier >( ctor = { ctor ( context ) }, update = { reconcile ( update ) } ) } emitView() is a function that can be used to add Android Views inside of a @Composable function. ctor expects a function that gets an Android Context and will return a class that extends an Android View. This constructor function will only be executed at initial rendering and when a parent composable triggers a new execution. You can use the value of a state in here, but it will not observe any changes. In the update function you will get the View that was created in ctor . This function is used to handle all updates of the composition tree. Here you can use your state objects and handle all the update logic. See also: \u00b6 Official Docs","title":"How to use an Android View in Compose"},{"location":"cookbook/how_to_use_an_android_view_in_compose/#how-to-use-an-android-view-in-compose","text":"Info This is the API of version dev16. Newer versions may have a different one Altough Compose itself is independent from the classic Android View system, in Android Apps it is possible to use Views(any class extends android.view.View) inside of Compose. This example will show you, how you can use a android.widget.Button , an android.widget.TextView and an android.widget.ImageView alongside with an Compose Button. In the example above you can see a @Composable() with a Column and a counter state. The ImageView is loading an drawable. The compose button and the wiget.Button will both update the counter and the TextView will display the value of counter. See below how emitView() is working. @Composable fun embeddedAndroidViewDemo () { Column { val state = state { 0 } //widget.ImageView emitView ( ctor = { ctx -> ImageView ( ctx ). apply { val drawable = ContextCompat . getDrawable ( ctx , R . drawable . ic_launcher_background ) setImageDrawable ( drawable ) } }, update = {}) //Compose Button Button ( onClick = { state . value ++ }) { Text ( \"MyComposeButton\" ) } //widget.Button emitView ( ctor = { ctx -> //Here you can construct your View Button ( ctx ). apply { text = \"MyAndroidButton\" layoutParams = LinearLayout . LayoutParams ( MATCH_PARENT , WRAP_CONTENT ) setOnClickListener { state . value ++ } } }, update = { }) //widget.TextView emitView ( ctor = { ctx -> //Here you can construct your View TextView ( ctx ). apply { layoutParams = LinearLayout . LayoutParams ( MATCH_PARENT , WRAP_CONTENT ) } }, update = { it . text = \"You have clicked the buttons: \" + state . value . toString () + \" times\" }) } }","title":"How to use an Android View in Compose"},{"location":"cookbook/how_to_use_an_android_view_in_compose/#emitview","text":"//androidx.compose.ui.viewinterop @Composable fun < T : View > emitView ( ctor : ( Context ) -> T , update : ( T ) -> Unit ) { val context = ContextAmbient . current emit < T , UiApplier >( ctor = { ctor ( context ) }, update = { reconcile ( update ) } ) } emitView() is a function that can be used to add Android Views inside of a @Composable function. ctor expects a function that gets an Android Context and will return a class that extends an Android View. This constructor function will only be executed at initial rendering and when a parent composable triggers a new execution. You can use the value of a state in here, but it will not observe any changes. In the update function you will get the View that was created in ctor . This function is used to handle all updates of the composition tree. Here you can use your state objects and handle all the update logic.","title":"EmitView"},{"location":"cookbook/how_to_use_an_android_view_in_compose/#see-also","text":"Official Docs","title":"See also:"},{"location":"cookbook/how_to_use_compose_in_viewgroup/","text":"How to use Compose in a ViewGroup \u00b6 Info This is the API of version dev16. Newer versions may have a different one Compose has a setContent() -extension function on ViewGroup which can be used, to use Compose inside a ViewGroup. This example will show you, how you can use Compose inside a FrameLayout. It should also work in other layouts like LinearLayout. As long as it\u2019s a layout that extends the ViewGroup class. //Extension function from Compose fun ViewGroup . setContent ( recomposer : Recomposer , parentComposition : CompositionReference ? = null , content : @Composable () -> Unit ): Composition { FrameManager . ensureStarted () val composeView = if ( childCount > 0 ) { getChildAt ( 0 ) as ? AndroidOwner } else { removeAllViews (); null } ?: AndroidOwner ( context ). also { addView ( it . view , DefaultLayoutParams ) } return doSetContent ( composeView , recomposer , parentComposition , content ) } Create a custom FrameLayout \u00b6 Create a custom FrameLayout, then you can use the setContent() for example inside init() . Inside setContent() you can then add your Compose code. class ComposeFrameLayout @JvmOverloads constructor ( context : Context , attrs : AttributeSet ? = null , defStyleAttr : Int = 0 ) : FrameLayout ( context , attrs , defStyleAttr ) { init { setContent ( Recomposer . current (), null ){ Button ( onClick = {}) { Text ( \"ComposeButton\" ) } } } } Add it to your layout file \u00b6 Just add your FrameLayout like any other layout. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:id= \"@+id/container\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" tools:context= \".MainActivity\" > <ComposeFrameLayout android:id= \"@+id/composeFrame\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:orientation= \"horizontal\" /> <Button android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"WidgetButton\" /> </LinearLayout>","title":"How to use Compose in a ViewGroup"},{"location":"cookbook/how_to_use_compose_in_viewgroup/#how-to-use-compose-in-a-viewgroup","text":"Info This is the API of version dev16. Newer versions may have a different one Compose has a setContent() -extension function on ViewGroup which can be used, to use Compose inside a ViewGroup. This example will show you, how you can use Compose inside a FrameLayout. It should also work in other layouts like LinearLayout. As long as it\u2019s a layout that extends the ViewGroup class. //Extension function from Compose fun ViewGroup . setContent ( recomposer : Recomposer , parentComposition : CompositionReference ? = null , content : @Composable () -> Unit ): Composition { FrameManager . ensureStarted () val composeView = if ( childCount > 0 ) { getChildAt ( 0 ) as ? AndroidOwner } else { removeAllViews (); null } ?: AndroidOwner ( context ). also { addView ( it . view , DefaultLayoutParams ) } return doSetContent ( composeView , recomposer , parentComposition , content ) }","title":"How to use Compose in a ViewGroup"},{"location":"cookbook/how_to_use_compose_in_viewgroup/#create-a-custom-framelayout","text":"Create a custom FrameLayout, then you can use the setContent() for example inside init() . Inside setContent() you can then add your Compose code. class ComposeFrameLayout @JvmOverloads constructor ( context : Context , attrs : AttributeSet ? = null , defStyleAttr : Int = 0 ) : FrameLayout ( context , attrs , defStyleAttr ) { init { setContent ( Recomposer . current (), null ){ Button ( onClick = {}) { Text ( \"ComposeButton\" ) } } } }","title":"Create a custom FrameLayout"},{"location":"cookbook/how_to_use_compose_in_viewgroup/#add-it-to-your-layout-file","text":"Just add your FrameLayout like any other layout. <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:tools= \"http://schemas.android.com/tools\" android:id= \"@+id/container\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" tools:context= \".MainActivity\" > <ComposeFrameLayout android:id= \"@+id/composeFrame\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:orientation= \"horizontal\" /> <Button android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"WidgetButton\" /> </LinearLayout>","title":"Add it to your layout file"},{"location":"cookbook/loadimage/","text":"How to load an image \u00b6 Info This is the API of version alpha02. Newer versions may have a different one You can use imageResource to load an image from the resources @Composable fun LoadImageResourceDemo (){ val imRes : ImageAsset = imageResource ( id = R . drawable . placeholder_1_1 ) Box ( modifier = Modifier . preferredHeight ( 50. dp ). then ( Modifier . preferredWidth ( 50. dp ))) { Image ( imRes ) } } See also: \u00b6 How to load an image from the resource folder?","title":"How to load an Image"},{"location":"cookbook/loadimage/#how-to-load-an-image","text":"Info This is the API of version alpha02. Newer versions may have a different one You can use imageResource to load an image from the resources @Composable fun LoadImageResourceDemo (){ val imRes : ImageAsset = imageResource ( id = R . drawable . placeholder_1_1 ) Box ( modifier = Modifier . preferredHeight ( 50. dp ). then ( Modifier . preferredWidth ( 50. dp ))) { Image ( imRes ) } }","title":"How to load an image"},{"location":"cookbook/loadimage/#see-also","text":"How to load an image from the resource folder?","title":"See also:"},{"location":"cookbook/overview/","text":"Cookbook \u00b6 Handle changes to a text field How to use Compose in a ViewGroup How to create HintTextField How to load an Image How to use an Android View in Compose How to get Android Context How to detect dark mode","title":"Overview"},{"location":"cookbook/overview/#cookbook","text":"Handle changes to a text field How to use Compose in a ViewGroup How to create HintTextField How to load an Image How to use an Android View in Compose How to get Android Context How to detect dark mode","title":"Cookbook"},{"location":"cookbook/textfield_changes/","text":"Handle changes to a TextField \u00b6 Info This is the API of version alpha01. Newer versions may have a different one In some cases, it\u2019s useful to get the value of a textfield every time the text in a text field changes. For example, you might want to build a search screen with autocomplete functionality where you want to update the results as the user types. With Compose you have the following options: Supply an onValueChange() callback to a BaseTextField \u00b6 @OptIn ( ExperimentalFoundationApi :: class ) @Composable fun HandleTextFieldChanges () { var textState by remember { mutableStateOf ( TextFieldValue ()) } BaseTextField ( value = textState , onValueChange = { textState = it }) } The simplest approach is to supply an onValueChange() callback to a BaseTextField. Whenever the text changes, the callback is invoked. In this example, every time the BaseTextField changes, the new text value will be saved in a state and set to the TextField and the Text.","title":"Handle changes to a text field"},{"location":"cookbook/textfield_changes/#handle-changes-to-a-textfield","text":"Info This is the API of version alpha01. Newer versions may have a different one In some cases, it\u2019s useful to get the value of a textfield every time the text in a text field changes. For example, you might want to build a search screen with autocomplete functionality where you want to update the results as the user types. With Compose you have the following options:","title":"Handle changes to a TextField"},{"location":"cookbook/textfield_changes/#supply-an-onvaluechange-callback-to-a-basetextfield","text":"@OptIn ( ExperimentalFoundationApi :: class ) @Composable fun HandleTextFieldChanges () { var textState by remember { mutableStateOf ( TextFieldValue ()) } BaseTextField ( value = textState , onValueChange = { textState = it }) } The simplest approach is to supply an onValueChange() callback to a BaseTextField. Whenever the text changes, the callback is invoked. In this example, every time the BaseTextField changes, the new text value will be saved in a state and set to the TextField and the Text.","title":"Supply an onValueChange() callback to a BaseTextField"},{"location":"foundation/box/","text":"Box \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one @Composable fun BoxDemo (){ Column ( modifier = Modifier . fillMaxWidth (). wrapContentSize ( Alignment . Center )) { Box ( modifier = Modifier . preferredSize ( 100. dp ), backgroundColor = Color . Red , shape = RectangleShape ) {} } }","title":"Box"},{"location":"foundation/box/#box","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one @Composable fun BoxDemo (){ Column ( modifier = Modifier . fillMaxWidth (). wrapContentSize ( Alignment . Center )) { Box ( modifier = Modifier . preferredSize ( 100. dp ), backgroundColor = Color . Red , shape = RectangleShape ) {} } }","title":"Box"},{"location":"foundation/canvas/","text":"Canvas \u00b6 Info This is the API of version dev09. Newer versions may have a different one How to draw on Canvas \u00b6 @Composable fun CanvasDrawExample () { Canvas ( modifier = Modifier . preferredHeight ( 60. dp )) { val paint = Paint () val centerY = 0f // draw rect paint . color = Color . Blue drawRect ( Rect ( 0f , centerY + 10 , size . width . value , 55f ), paint ) // draw circle drawCircle ( Offset ( 50f , 200f ), 40f , paint ) //Draw a line paint . color = Color . Red paint . strokeWidth = 5f drawLine ( Offset ( 20f , 0f ), Offset ( 200f , 200f ), paint ) } }","title":"Canvas"},{"location":"foundation/canvas/#canvas","text":"Info This is the API of version dev09. Newer versions may have a different one","title":"Canvas"},{"location":"foundation/canvas/#how-to-draw-on-canvas","text":"@Composable fun CanvasDrawExample () { Canvas ( modifier = Modifier . preferredHeight ( 60. dp )) { val paint = Paint () val centerY = 0f // draw rect paint . color = Color . Blue drawRect ( Rect ( 0f , centerY + 10 , size . width . value , 55f ), paint ) // draw circle drawCircle ( Offset ( 50f , 200f ), 40f , paint ) //Draw a line paint . color = Color . Red paint . strokeWidth = 5f drawLine ( Offset ( 20f , 0f ), Offset ( 200f , 200f ), paint ) } }","title":"How to draw on Canvas"},{"location":"foundation/image/","text":"Image \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one Image is used to display Images. It\u2019s similar to an ImageView in the classic Android View system. Load Image Drawable \u00b6 @Composable fun ImageResourceDrawableDemo () { val image = loadImageResource ( id = R . drawable . composelogo ) //loadImageResource will load the drawable asynchronous image . resource . resource ?. let { Image ( asset = it ) } } Load Vector Drawable \u00b6 @Composable fun ImageVectorResourceDemo () { val image = loadVectorResource ( id = R . drawable . favorite ) //loadVectorResource will load the vector image asynchronous image . resource . resource ?. let { Image ( asset = it ) } }","title":"Image"},{"location":"foundation/image/#image","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one Image is used to display Images. It\u2019s similar to an ImageView in the classic Android View system.","title":"Image"},{"location":"foundation/image/#load-image-drawable","text":"@Composable fun ImageResourceDrawableDemo () { val image = loadImageResource ( id = R . drawable . composelogo ) //loadImageResource will load the drawable asynchronous image . resource . resource ?. let { Image ( asset = it ) } }","title":"Load Image Drawable"},{"location":"foundation/image/#load-vector-drawable","text":"@Composable fun ImageVectorResourceDemo () { val image = loadVectorResource ( id = R . drawable . favorite ) //loadVectorResource will load the vector image asynchronous image . resource . resource ?. let { Image ( asset = it ) } }","title":"Load Vector Drawable"},{"location":"foundation/lazycolumnfor/","text":"LazyColumnFor \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A LazyColumnFor is a vertically scrolling list that only composes and lays out the currently visible items. It\u2019s similar to a Recyclerview in the classic Android View system. @Composable fun LazyColumnForDemo () { LazyColumnFor ( items = listOf ( \"A\" , \"B\" , \"C\" , \"D\" ) + (( 0. . 100 ). map { it . toString () }), modifier = Modifier , itemContent = { item -> Log . d ( \"COMPOSE\" , \"This get rendered $item\" ) when ( item ) { \"A\" -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } \"B\" -> { Button ( onClick = {}) { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } \"C\" -> { //Do Nothing } \"D\" -> { Text ( text = item ) } else -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } }) } items \u00b6 This is the data of items that should be displayed. It expects a List of T modifier \u00b6 Here you can specify some modifiers itemContent \u00b6 This will be called every time a item from the items -List gets visible. Then you can create your composable that should be displayed. See also: \u00b6 Official Docs","title":"LazyColumnFor"},{"location":"foundation/lazycolumnfor/#lazycolumnfor","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A LazyColumnFor is a vertically scrolling list that only composes and lays out the currently visible items. It\u2019s similar to a Recyclerview in the classic Android View system. @Composable fun LazyColumnForDemo () { LazyColumnFor ( items = listOf ( \"A\" , \"B\" , \"C\" , \"D\" ) + (( 0. . 100 ). map { it . toString () }), modifier = Modifier , itemContent = { item -> Log . d ( \"COMPOSE\" , \"This get rendered $item\" ) when ( item ) { \"A\" -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } \"B\" -> { Button ( onClick = {}) { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } \"C\" -> { //Do Nothing } \"D\" -> { Text ( text = item ) } else -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } }) }","title":"LazyColumnFor"},{"location":"foundation/lazycolumnfor/#items","text":"This is the data of items that should be displayed. It expects a List of T","title":"items"},{"location":"foundation/lazycolumnfor/#modifier","text":"Here you can specify some modifiers","title":"modifier"},{"location":"foundation/lazycolumnfor/#itemcontent","text":"This will be called every time a item from the items -List gets visible. Then you can create your composable that should be displayed.","title":"itemContent"},{"location":"foundation/lazycolumnfor/#see-also","text":"Official Docs","title":"See also:"},{"location":"foundation/lazyrowfor/","text":"LazyRowFor \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A LazyRowFor is a horizontal scrolling list that only composes and lays out the currently visible items. It\u2019s similar to a horizontal Recyclerview in the classic Android View system. @Composable fun LazyRowForDemo () { LazyRowFor ( items = listOf ( \"A\" , \"B\" , \"C\" , \"D\" ) + (( 0. . 100 ). map { it . toString () }), modifier = Modifier , itemContent = { item -> Log . d ( \"COMPOSE\" , \"This get rendered $item\" ) when ( item ) { \"A\" -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } \"B\" -> { Button ( onClick = {}) { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } \"C\" -> { //Do Nothing } \"D\" -> { Text ( text = item ) } else -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } }) } items \u00b6 This is the data of items that should be displayed. It expects a List of T modifier \u00b6 Here you can specify some modifiers itemContent \u00b6 This will be called every time a item from the items -List gets visible. Then you can create your composable that should be displayed. See also: \u00b6 Official Docs","title":"LazyRowFor"},{"location":"foundation/lazyrowfor/#lazyrowfor","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A LazyRowFor is a horizontal scrolling list that only composes and lays out the currently visible items. It\u2019s similar to a horizontal Recyclerview in the classic Android View system. @Composable fun LazyRowForDemo () { LazyRowFor ( items = listOf ( \"A\" , \"B\" , \"C\" , \"D\" ) + (( 0. . 100 ). map { it . toString () }), modifier = Modifier , itemContent = { item -> Log . d ( \"COMPOSE\" , \"This get rendered $item\" ) when ( item ) { \"A\" -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } \"B\" -> { Button ( onClick = {}) { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } \"C\" -> { //Do Nothing } \"D\" -> { Text ( text = item ) } else -> { Text ( text = item , style = TextStyle ( fontSize = 80. sp )) } } }) }","title":"LazyRowFor"},{"location":"foundation/lazyrowfor/#items","text":"This is the data of items that should be displayed. It expects a List of T","title":"items"},{"location":"foundation/lazyrowfor/#modifier","text":"Here you can specify some modifiers","title":"modifier"},{"location":"foundation/lazyrowfor/#itemcontent","text":"This will be called every time a item from the items -List gets visible. Then you can create your composable that should be displayed.","title":"itemContent"},{"location":"foundation/lazyrowfor/#see-also","text":"Official Docs","title":"See also:"},{"location":"foundation/scrollablecolumn/","text":"ScrollableColumn \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one When an app has layout content that might be longer than the height of the device and that content should be vertically scrollable, then we need to use a ScrollableColumn. It\u2019s similar to a ScrollView @Composable fun ScrollableColumnExample () { ScrollableColumn { //Only one child is allowed in a ScrollableColumn Column { for ( i in 0. . 100 ) { Text ( \"$i Hello World!\" , style =( MaterialTheme . typography ()). body1 ) } } } } Note that a ScrollableColumn can only contain a single child element so if you need multiple things to be scrollable, you need to wrap that content into a layout as shown above. See also: \u00b6 Official Docs Video","title":"ScrollableColumn"},{"location":"foundation/scrollablecolumn/#scrollablecolumn","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one When an app has layout content that might be longer than the height of the device and that content should be vertically scrollable, then we need to use a ScrollableColumn. It\u2019s similar to a ScrollView @Composable fun ScrollableColumnExample () { ScrollableColumn { //Only one child is allowed in a ScrollableColumn Column { for ( i in 0. . 100 ) { Text ( \"$i Hello World!\" , style =( MaterialTheme . typography ()). body1 ) } } } } Note that a ScrollableColumn can only contain a single child element so if you need multiple things to be scrollable, you need to wrap that content into a layout as shown above.","title":"ScrollableColumn"},{"location":"foundation/scrollablecolumn/#see-also","text":"Official Docs Video","title":"See also:"},{"location":"foundation/scrollablerow/","text":"ScrollableRow \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one When an app has layout content that might be longer than the width of the device and that content should be horizontal scrollable, then we need to use a ScrollableRow. It is the horizontal equivalent of ScrollableColumn @Composable fun ScrollableRowExample () { ScrollableRow ( children = { //Only one child is allowed in a VerticalScroller Row { for ( i in 0. . 100 ) { Text ( text = \"$i Hello World!\" , style =( MaterialTheme . typography ). body1 ) } } }) }","title":"ScrollableRow"},{"location":"foundation/scrollablerow/#scrollablerow","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one When an app has layout content that might be longer than the width of the device and that content should be horizontal scrollable, then we need to use a ScrollableRow. It is the horizontal equivalent of ScrollableColumn @Composable fun ScrollableRowExample () { ScrollableRow ( children = { //Only one child is allowed in a VerticalScroller Row { for ( i in 0. . 100 ) { Text ( text = \"$i Hello World!\" , style =( MaterialTheme . typography ). body1 ) } } }) }","title":"ScrollableRow"},{"location":"foundation/shape/","text":"Shape \u00b6 A Shape can be used to draw a composable in specific shape. Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one RectangleShape \u00b6 A shape describing the rectangle. @Composable fun RectangleShapeDemo (){ ExampleBox ( shape = RectangleShape ) } @Composable fun ExampleBox ( shape : Shape ){ Column ( modifier = Modifier . fillMaxWidth (). wrapContentSize ( Alignment . Center )) { Box ( modifier = Modifier . preferredSize ( 100. dp ), backgroundColor = Color . Red , shape = shape ) {} } } CircleShape \u00b6 Circular Shape with all the corners sized as the 50 percent of the shape size. @Composable fun CircleShapeDemo (){ ExampleBox ( shape = CircleShape ) } @Composable fun ExampleBox ( shape : Shape ){ Column ( modifier = Modifier . fillMaxWidth (). wrapContentSize ( Alignment . Center )) { Box ( modifier = Modifier . preferredSize ( 100. dp ), backgroundColor = Color . Red , shape = shape ) {} } } RoundedCornerShape \u00b6 A shape describing the rectangle with rounded corners. @Composable fun RoundedCornerShapeDemo (){ ExampleBox ( shape = RoundedCornerShape ( 10. dp )) } @Composable fun ExampleBox ( shape : Shape ){ Column ( modifier = Modifier . fillMaxWidth (). wrapContentSize ( Alignment . Center )) { Box ( modifier = Modifier . preferredSize ( 100. dp ), backgroundColor = Color . Red , shape = shape ) {} } } CutCornerShape \u00b6 A shape describing the rectangle with cut corners. @Composable fun CutCornerShapeDemo (){ ExampleBox ( shape = CutCornerShape ( 10. dp )) } @Composable fun ExampleBox ( shape : Shape ){ Column ( modifier = Modifier . fillMaxWidth (). wrapContentSize ( Alignment . Center )) { Box ( modifier = Modifier . preferredSize ( 100. dp ), backgroundColor = Color . Red , shape = shape ) {} } } How to draw a custom shape? \u00b6 GenericShape \u00b6 You can create custom shapes. One way to do it, is to use GenericShape . Let\u2019s see how the triangle is drawn. private val TriangleShape = GenericShape { size -> // 1) moveTo ( size . width / 2f , 0f ) // 2) lineTo ( size . width , size . height ) // 3) lineTo ( 0f , size . height ) } Inside the GenericShape you can draw your custom shape. You have access to the size -object. This is size of the composable that the shape is applied to. You can get the height with size.height and the width with size.width 1) Initially the painter will start at the top left of the parent composable(0x,0y). With moveTo() you can set the coordinates of the painter. Here the coordinates will be set to the half width of the parent layout and a 0y coordinate. 2) This will draw a line from the painter coordinates, which were set in 1) , to the bottom right corner of the parent layout. The painter coordinates are then automatically set to this corner. 3) This will draw a line to the bottom left corner. GenericShape will implicitly execute the close() -function. close() will draw a line from the last painter coordinates to the first definied. Extend the Shape interface \u00b6 /** * Defines a generic shape. */ interface Shape { /** /** * Creates [Outline] of this shape for the given [size]. * * @param size the size of the shape boundary. * @param density the current density of the screen. * * @return [Outline] of this shape for the given [size]. */ fun createOutline ( size : Size , density : Density ): Outline } You can extend the Shape interface to create your own implementation of Shape. Inside createOutline you get the size of the composable, which the shape is applied to and the density of the screen. You have to return an instance of Outline . Outline is a sealed class with the following subclasses: Rectangle(val rect: Rect) Rounded(val rrect: RRect) Generic(val path: Path) Take a look at the GenericShape example when you want to understand, how the drawing of a custom shape works. class CustomShape : Shape { override fun createOutline ( size : Size , density : Density ): Outline { val path = Path (). apply { moveTo ( size . width / 2f , 0f ) lineTo ( size . width , size . height ) lineTo ( 0f , size . height ) close () } return Outline . Generic ( path ) } }","title":"Shape"},{"location":"foundation/shape/#shape","text":"A Shape can be used to draw a composable in specific shape. Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one","title":"Shape"},{"location":"foundation/shape/#rectangleshape","text":"A shape describing the rectangle. @Composable fun RectangleShapeDemo (){ ExampleBox ( shape = RectangleShape ) } @Composable fun ExampleBox ( shape : Shape ){ Column ( modifier = Modifier . fillMaxWidth (). wrapContentSize ( Alignment . Center )) { Box ( modifier = Modifier . preferredSize ( 100. dp ), backgroundColor = Color . Red , shape = shape ) {} } }","title":"RectangleShape"},{"location":"foundation/shape/#circleshape","text":"Circular Shape with all the corners sized as the 50 percent of the shape size. @Composable fun CircleShapeDemo (){ ExampleBox ( shape = CircleShape ) } @Composable fun ExampleBox ( shape : Shape ){ Column ( modifier = Modifier . fillMaxWidth (). wrapContentSize ( Alignment . Center )) { Box ( modifier = Modifier . preferredSize ( 100. dp ), backgroundColor = Color . Red , shape = shape ) {} } }","title":"CircleShape"},{"location":"foundation/shape/#roundedcornershape","text":"A shape describing the rectangle with rounded corners. @Composable fun RoundedCornerShapeDemo (){ ExampleBox ( shape = RoundedCornerShape ( 10. dp )) } @Composable fun ExampleBox ( shape : Shape ){ Column ( modifier = Modifier . fillMaxWidth (). wrapContentSize ( Alignment . Center )) { Box ( modifier = Modifier . preferredSize ( 100. dp ), backgroundColor = Color . Red , shape = shape ) {} } }","title":"RoundedCornerShape"},{"location":"foundation/shape/#cutcornershape","text":"A shape describing the rectangle with cut corners. @Composable fun CutCornerShapeDemo (){ ExampleBox ( shape = CutCornerShape ( 10. dp )) } @Composable fun ExampleBox ( shape : Shape ){ Column ( modifier = Modifier . fillMaxWidth (). wrapContentSize ( Alignment . Center )) { Box ( modifier = Modifier . preferredSize ( 100. dp ), backgroundColor = Color . Red , shape = shape ) {} } }","title":"CutCornerShape"},{"location":"foundation/shape/#how-to-draw-a-custom-shape","text":"","title":"How to draw a custom shape?"},{"location":"foundation/shape/#genericshape","text":"You can create custom shapes. One way to do it, is to use GenericShape . Let\u2019s see how the triangle is drawn. private val TriangleShape = GenericShape { size -> // 1) moveTo ( size . width / 2f , 0f ) // 2) lineTo ( size . width , size . height ) // 3) lineTo ( 0f , size . height ) } Inside the GenericShape you can draw your custom shape. You have access to the size -object. This is size of the composable that the shape is applied to. You can get the height with size.height and the width with size.width 1) Initially the painter will start at the top left of the parent composable(0x,0y). With moveTo() you can set the coordinates of the painter. Here the coordinates will be set to the half width of the parent layout and a 0y coordinate. 2) This will draw a line from the painter coordinates, which were set in 1) , to the bottom right corner of the parent layout. The painter coordinates are then automatically set to this corner. 3) This will draw a line to the bottom left corner. GenericShape will implicitly execute the close() -function. close() will draw a line from the last painter coordinates to the first definied.","title":"GenericShape"},{"location":"foundation/shape/#extend-the-shape-interface","text":"/** * Defines a generic shape. */ interface Shape { /** /** * Creates [Outline] of this shape for the given [size]. * * @param size the size of the shape boundary. * @param density the current density of the screen. * * @return [Outline] of this shape for the given [size]. */ fun createOutline ( size : Size , density : Density ): Outline } You can extend the Shape interface to create your own implementation of Shape. Inside createOutline you get the size of the composable, which the shape is applied to and the density of the screen. You have to return an instance of Outline . Outline is a sealed class with the following subclasses: Rectangle(val rect: Rect) Rounded(val rrect: RRect) Generic(val path: Path) Take a look at the GenericShape example when you want to understand, how the drawing of a custom shape works. class CustomShape : Shape { override fun createOutline ( size : Size , density : Density ): Outline { val path = Path (). apply { moveTo ( size . width / 2f , 0f ) lineTo ( size . width , size . height ) lineTo ( 0f , size . height ) close () } return Outline . Generic ( path ) } }","title":"Extend the Shape interface"},{"location":"foundation/text/","text":"Text \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one You can use Text to display text. You can use the style argument to define things like textdecoration or fontfamily. @Composable fun TextExample (){ Column { Text ( \"Just Text\" ) Text ( \"Text with cursive font\" , style = TextStyle ( fontFamily = Cursive )) Text ( text = \"Text with LineThrough\" , style = TextStyle ( textDecoration = TextDecoration . LineThrough ) ) Text ( text = \"Text with underline\" , style = TextStyle ( textDecoration = TextDecoration . Underline ) ) Text ( text = \"Text with underline, linethrough and bold\" , style = TextStyle ( textDecoration = TextDecoration . combine ( listOf ( TextDecoration . Underline , TextDecoration . LineThrough ) ), fontWeight = FontWeight . Bold ) ) } } Working with Text \u00b6 Normal text \u00b6 @Composable fun NormalTextExample (){ Text ( \"Just Text\" ) } Cursive text \u00b6 @Composable fun CursiveTextExample (){ Text ( \"Text with cursive font\" , style = TextStyle ( fontFamily = Cursive )) } Text with LineThrough \u00b6 @Composable fun TextWithLineThroughExample (){ Text ( text = \"Text with LineThrough\" , style = TextStyle ( textDecoration = TextDecoration . LineThrough ) ) } Text with underline \u00b6 @Composable fun TextWithUnderline (){ Text ( text = \"Text with underline\" , style = TextStyle ( textDecoration = TextDecoration . Underline ) ) } Text with underline, bold and linethrough \u00b6 @Composable fun TextWithUnderlineStrikeThroughAndBold (){ Text ( text = \"Text with underline, linethrough and bold\" , style = TextStyle ( textDecoration = TextDecoration . combine ( listOf ( TextDecoration . Underline , TextDecoration . LineThrough ) ), fontWeight = FontWeight . Bold ) ) }","title":"Text"},{"location":"foundation/text/#text","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one You can use Text to display text. You can use the style argument to define things like textdecoration or fontfamily. @Composable fun TextExample (){ Column { Text ( \"Just Text\" ) Text ( \"Text with cursive font\" , style = TextStyle ( fontFamily = Cursive )) Text ( text = \"Text with LineThrough\" , style = TextStyle ( textDecoration = TextDecoration . LineThrough ) ) Text ( text = \"Text with underline\" , style = TextStyle ( textDecoration = TextDecoration . Underline ) ) Text ( text = \"Text with underline, linethrough and bold\" , style = TextStyle ( textDecoration = TextDecoration . combine ( listOf ( TextDecoration . Underline , TextDecoration . LineThrough ) ), fontWeight = FontWeight . Bold ) ) } }","title":"Text"},{"location":"foundation/text/#working-with-text","text":"","title":"Working with Text"},{"location":"foundation/text/#normal-text","text":"@Composable fun NormalTextExample (){ Text ( \"Just Text\" ) }","title":"Normal text"},{"location":"foundation/text/#cursive-text","text":"@Composable fun CursiveTextExample (){ Text ( \"Text with cursive font\" , style = TextStyle ( fontFamily = Cursive )) }","title":"Cursive text"},{"location":"foundation/text/#text-with-linethrough","text":"@Composable fun TextWithLineThroughExample (){ Text ( text = \"Text with LineThrough\" , style = TextStyle ( textDecoration = TextDecoration . LineThrough ) ) }","title":"Text with LineThrough"},{"location":"foundation/text/#text-with-underline","text":"@Composable fun TextWithUnderline (){ Text ( text = \"Text with underline\" , style = TextStyle ( textDecoration = TextDecoration . Underline ) ) }","title":"Text with underline"},{"location":"foundation/text/#text-with-underline-bold-and-linethrough","text":"@Composable fun TextWithUnderlineStrikeThroughAndBold (){ Text ( text = \"Text with underline, linethrough and bold\" , style = TextStyle ( textDecoration = TextDecoration . combine ( listOf ( TextDecoration . Underline , TextDecoration . LineThrough ) ), fontWeight = FontWeight . Bold ) ) }","title":"Text with underline, bold and linethrough"},{"location":"foundation/textfield/","text":"TextField \u00b6 Info This is the API of version dev10. Newer versions may have a different one TextField can be used to insert text. This is the equivalent to EditText from the Android View system. @Composable fun TextFieldDemo () { Column { val state = state { TextFieldValue ( \"\" ) } TextField ( value = state . value , onValueChange = { state . value = it } ) Text ( \"The textfield has this text: \" + state . value ) } } See also: \u00b6 Handle changes in a TextField How to show hint with underline in a TextField","title":"TextField"},{"location":"foundation/textfield/#textfield","text":"Info This is the API of version dev10. Newer versions may have a different one TextField can be used to insert text. This is the equivalent to EditText from the Android View system. @Composable fun TextFieldDemo () { Column { val state = state { TextFieldValue ( \"\" ) } TextField ( value = state . value , onValueChange = { state . value = it } ) Text ( \"The textfield has this text: \" + state . value ) } }","title":"TextField"},{"location":"foundation/textfield/#see-also","text":"Handle changes in a TextField How to show hint with underline in a TextField","title":"See also:"},{"location":"general/ambient/","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one Ambient is useful when you want to create a dependency in a higher node of the layout tree and use it on lower node without having to pass it down the tree through every child composable. How to create an Ambient? \u00b6 data class User ( val name : String , val age : Int ) val ActiveUser = ambientOf < User > { error ( \"No user found!\" ) } Let\u2019s say you want to create an ambient with an User. You can use ambientOf() . Inside the function you can return an initial user object or you can throw an exception when the user is missing. How to provide a value for an Ambient? \u00b6 @Composable private fun MyUserScreen () { val user = User ( \"Jens\" , 31 ) Providers ( ActiveUser provides user ) { UserInfo () } } Somewhere above in your hierarchy you have to use Providers to provide a value for your ambient. You can provide the values of multiple ambients inside Providers. The syntax is: \u201c Ambient <T> provides T \u201d. All child @Composable of Providers will implicitly be able to get the value of the ambients. How to use a value of an Ambient? \u00b6 @Preview @Composable fun UserInfo () { Column { Text ( \"Name: \" + ActiveUser . current . name ) Text ( \"Age: \" + ActiveUser . current . age ) } } Now you can use your ambient in your @Composable. Every ambient has a current property that contains the current value. Predifinied Ambients \u00b6 The Compose libraries already contain some useful ambients. You can directly use them without needing add a Providers. ContextAmbient \u00b6 Provides a [Context] that can be used by Android applications. ConfigurationAmbient \u00b6 The [Configuration] is useful for determining how to organize the UI. LifecycleOwnerAmbient \u00b6 The ambient containing the current [LifecycleOwner]. ViewAmbient \u00b6 The ambient containing the current Compose [View]. ViewModelStoreOwnerAmbient \u00b6 The ambient containing the current [ViewModelStoreOwner]. See also: \u00b6 Official Docs Full Example Code","title":"Ambient"},{"location":"general/ambient/#how-to-create-an-ambient","text":"data class User ( val name : String , val age : Int ) val ActiveUser = ambientOf < User > { error ( \"No user found!\" ) } Let\u2019s say you want to create an ambient with an User. You can use ambientOf() . Inside the function you can return an initial user object or you can throw an exception when the user is missing.","title":"How to create an Ambient?"},{"location":"general/ambient/#how-to-provide-a-value-for-an-ambient","text":"@Composable private fun MyUserScreen () { val user = User ( \"Jens\" , 31 ) Providers ( ActiveUser provides user ) { UserInfo () } } Somewhere above in your hierarchy you have to use Providers to provide a value for your ambient. You can provide the values of multiple ambients inside Providers. The syntax is: \u201c Ambient <T> provides T \u201d. All child @Composable of Providers will implicitly be able to get the value of the ambients.","title":"How to provide a value for an Ambient?"},{"location":"general/ambient/#how-to-use-a-value-of-an-ambient","text":"@Preview @Composable fun UserInfo () { Column { Text ( \"Name: \" + ActiveUser . current . name ) Text ( \"Age: \" + ActiveUser . current . age ) } } Now you can use your ambient in your @Composable. Every ambient has a current property that contains the current value.","title":"How to use a value of an Ambient?"},{"location":"general/ambient/#predifinied-ambients","text":"The Compose libraries already contain some useful ambients. You can directly use them without needing add a Providers.","title":"Predifinied Ambients"},{"location":"general/ambient/#contextambient","text":"Provides a [Context] that can be used by Android applications.","title":"ContextAmbient"},{"location":"general/ambient/#configurationambient","text":"The [Configuration] is useful for determining how to organize the UI.","title":"ConfigurationAmbient"},{"location":"general/ambient/#lifecycleownerambient","text":"The ambient containing the current [LifecycleOwner].","title":"LifecycleOwnerAmbient"},{"location":"general/ambient/#viewambient","text":"The ambient containing the current Compose [View].","title":"ViewAmbient"},{"location":"general/ambient/#viewmodelstoreownerambient","text":"The ambient containing the current [ViewModelStoreOwner].","title":"ViewModelStoreOwnerAmbient"},{"location":"general/ambient/#see-also","text":"Official Docs Full Example Code","title":"See also:"},{"location":"general/codelabs/","text":"Codelabs \u00b6 Work in Progress","title":"Codelabs"},{"location":"general/codelabs/#codelabs","text":"Work in Progress","title":"Codelabs"},{"location":"general/compiler_plugin/","text":"Compiler Plugin \u00b6 Compose works by transforming all Kotlin functions that are annotated with @Composable. To do that it uses a Kotlin Compiler Plugin. Where can i find the source code \u00b6 https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/compose-compiler-hosted/ See also: \u00b6 Under the hood of Jetpack Compose \u2014 part 2 of 2","title":"Compiler Plugin"},{"location":"general/compiler_plugin/#compiler-plugin","text":"Compose works by transforming all Kotlin functions that are annotated with @Composable. To do that it uses a Kotlin Compiler Plugin.","title":"Compiler Plugin"},{"location":"general/compiler_plugin/#where-can-i-find-the-source-code","text":"https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/compose-compiler-hosted/","title":"Where can i find the source code"},{"location":"general/compiler_plugin/#see-also","text":"Under the hood of Jetpack Compose \u2014 part 2 of 2","title":"See also:"},{"location":"general/compose_lifecycle/","text":"Compose Lifecycle \u00b6 Info This is the API of version alpha01. Newer versions may have a different one Compose has some \u201ceffects\u201d-function that can be used in compose function to track the lifecycle of a function. onActive {} willl be called the first time a compose function is applied. onDispose { } will be called when the compose function isn\u2019t part of the composition anymore. The example below has a Button that will count up everytime it gets clicked. When the count value gets 3, the Text() function will not be added anymore. The first time the LifecycleDemo will be executed, the +onActive{} in the if-clause will be executed. When the count value gets 3 +onDispose{} inside the if-clause will be called. @Composable fun LifecycleDemo () { val count = state { 0 } Column { Button ( onClick = { count . value ++ }) { Text ( \"Click me\" ) } if ( count . value < 3 ) { onActive { Log . d ( \"Compose\" , \"onactive with value: \" + count . value ) } onDispose { Log . d ( \"Compose\" , \"onDispose because value=\" + count . value ) } Text ( \"You have clicked the button: \" + count . value . toString ()) } } }","title":"Compose Lifecycle"},{"location":"general/compose_lifecycle/#compose-lifecycle","text":"Info This is the API of version alpha01. Newer versions may have a different one Compose has some \u201ceffects\u201d-function that can be used in compose function to track the lifecycle of a function. onActive {} willl be called the first time a compose function is applied. onDispose { } will be called when the compose function isn\u2019t part of the composition anymore. The example below has a Button that will count up everytime it gets clicked. When the count value gets 3, the Text() function will not be added anymore. The first time the LifecycleDemo will be executed, the +onActive{} in the if-clause will be executed. When the count value gets 3 +onDispose{} inside the if-clause will be called. @Composable fun LifecycleDemo () { val count = state { 0 } Column { Button ( onClick = { count . value ++ }) { Text ( \"Click me\" ) } if ( count . value < 3 ) { onActive { Log . d ( \"Compose\" , \"onactive with value: \" + count . value ) } onDispose { Log . d ( \"Compose\" , \"onDispose because value=\" + count . value ) } Text ( \"You have clicked the button: \" + count . value . toString ()) } } }","title":"Compose Lifecycle"},{"location":"general/getting_started/","text":"Info Note: Jetpack Compose is currently in Developer Preview. The API surface is not yet finalized, and changes are planned and expected. See the Compose Compiler and Runtime release notes and the Compose UI release notes for the latest updates. Android Studio \u00b6 To use Jetpack Compose you need to use at least a version >=4.2 Canary 8 Gradle Dependencies \u00b6 Add this inside in the android{} block your build.gradle buildFeatures { compose true } composeOptions { kotlinCompilerVersion \"1.4.0\" kotlinCompilerExtensionVersion \"1.0.0-alpha02\" } Below are all compose dependencies that are online available, you don\u2019t need to add all of them. dependencies { def compose_version = \"1.0.0-alpha02\" implementation ( \"androidx.compose.runtime:runtime-dispatch:$compose_version\" ) implementation ( \"androidx.compose.runtime:runtime:$compose_version\" ) implementation \"androidx.compose.animation:animation-core:$compose_version\" implementation \"androidx.compose.animation:animation:$compose_version\" implementation ( \"androidx.compose.ui:ui:$compose_version\" ) implementation \"androidx.compose.foundation:foundation:$compose_version\" implementation \"androidx.compose.ui:ui-geometry:$compose_version\" implementation \"androidx.compose.ui:ui-graphics:$compose_version\" implementation \"androidx.compose.foundation:foundation-layout:$compose_version\" implementation \"androidx.compose.runtime:runtime-livedata:$compose_version\" implementation \"androidx.compose.material:material:$compose_version\" implementation \"androidx.compose.material:material-icons-core:$compose_version\" implementation \"androidx.compose.material:material-icons-extended:$compose_version\" implementation \"androidx.compose.runtime:runtime-rxjava2:$compose_version\" implementation ( \"androidx.compose.ui:ui-text:$compose_version\" ) implementation ( \"androidx.compose.ui:ui-text:$compose_version\" ) implementation ( \"androidx.compose.ui:ui-text-android:$compose_version\" ) implementation ( \"androidx.compose.ui:ui-util:$compose_version\" ) implementation ( \"androidx.compose.ui:ui-viewbinding:$compose_version\" ) }","title":"Project Setup"},{"location":"general/getting_started/#android-studio","text":"To use Jetpack Compose you need to use at least a version >=4.2 Canary 8","title":"Android Studio"},{"location":"general/getting_started/#gradle-dependencies","text":"Add this inside in the android{} block your build.gradle buildFeatures { compose true } composeOptions { kotlinCompilerVersion \"1.4.0\" kotlinCompilerExtensionVersion \"1.0.0-alpha02\" } Below are all compose dependencies that are online available, you don\u2019t need to add all of them. dependencies { def compose_version = \"1.0.0-alpha02\" implementation ( \"androidx.compose.runtime:runtime-dispatch:$compose_version\" ) implementation ( \"androidx.compose.runtime:runtime:$compose_version\" ) implementation \"androidx.compose.animation:animation-core:$compose_version\" implementation \"androidx.compose.animation:animation:$compose_version\" implementation ( \"androidx.compose.ui:ui:$compose_version\" ) implementation \"androidx.compose.foundation:foundation:$compose_version\" implementation \"androidx.compose.ui:ui-geometry:$compose_version\" implementation \"androidx.compose.ui:ui-graphics:$compose_version\" implementation \"androidx.compose.foundation:foundation-layout:$compose_version\" implementation \"androidx.compose.runtime:runtime-livedata:$compose_version\" implementation \"androidx.compose.material:material:$compose_version\" implementation \"androidx.compose.material:material-icons-core:$compose_version\" implementation \"androidx.compose.material:material-icons-extended:$compose_version\" implementation \"androidx.compose.runtime:runtime-rxjava2:$compose_version\" implementation ( \"androidx.compose.ui:ui-text:$compose_version\" ) implementation ( \"androidx.compose.ui:ui-text:$compose_version\" ) implementation ( \"androidx.compose.ui:ui-text-android:$compose_version\" ) implementation ( \"androidx.compose.ui:ui-util:$compose_version\" ) implementation ( \"androidx.compose.ui:ui-viewbinding:$compose_version\" ) }","title":"Gradle Dependencies"},{"location":"general/helloworld/","text":"Hello World Compose \u00b6 Setup the project \u00b6 First setup your Project Setup Write a simple Compose function \u00b6 A basic Compose View is using a normal Kotlin function which is annotated with @Composable @Composable fun HelloWorld () { Text ( \"Hello World!\" ) } Use a Compose function as a view in your android app \u00b6 To use the HelloWorld() function in your App you have to use the setContent() extension function inside a onCreate() in an Activity. class MainActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContent { HelloWorld () } } }","title":"Hello World Compose"},{"location":"general/helloworld/#hello-world-compose","text":"","title":"Hello World Compose"},{"location":"general/helloworld/#setup-the-project","text":"First setup your Project Setup","title":"Setup the project"},{"location":"general/helloworld/#write-a-simple-compose-function","text":"A basic Compose View is using a normal Kotlin function which is annotated with @Composable @Composable fun HelloWorld () { Text ( \"Hello World!\" ) }","title":"Write a simple Compose function"},{"location":"general/helloworld/#use-a-compose-function-as-a-view-in-your-android-app","text":"To use the HelloWorld() function in your App you have to use the setContent() extension function inside a onCreate() in an Activity. class MainActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContent { HelloWorld () } } }","title":"Use a Compose function as a view in your android app"},{"location":"general/modifier/","text":"Modifier \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one Modifiers can be used modify certain aspects of a composable. To set them, a composable needs to accept a modifier as a parameter. Combine modifiers \u00b6 Column ( modifier = Modifier . preferredHeight ( 500. dp ). padding ( 100. dp )) { Text ( \"Hello\" ) } You can chain multiple modifiers. The order is important modifier elements to the left are applied before modifier elements to the right. Some Modifiers \u00b6 Modifier.None \u00b6 This can be used as a default parameter. Modifier.preferredHeight() \u00b6 Modifies the height of a Compose UI layout element. Modifier.preferredWidth() \u00b6 Modifies the width of a Compose UI layout element. Modifier.preferredSize() \u00b6 Modifies the width and height of a Compose UI layout element together Modifier.padding() \u00b6 You can use Modifier.padding to set padding to composables that take a modifier as an argument. @Composable fun PaddingDemo () { Column { Text ( \"TextWithoutPadding\" ) Column ( modifier = Modifier . padding ( start = 80. dp )){ Text ( \"TextWith80dpOnlyLeftPadding\" ) } Column ( Modifier . padding ( all = 80. dp )){ Text ( \"TextWith80dpPadding\" ) } } }","title":"Modifier"},{"location":"general/modifier/#modifier","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one Modifiers can be used modify certain aspects of a composable. To set them, a composable needs to accept a modifier as a parameter.","title":"Modifier"},{"location":"general/modifier/#combine-modifiers","text":"Column ( modifier = Modifier . preferredHeight ( 500. dp ). padding ( 100. dp )) { Text ( \"Hello\" ) } You can chain multiple modifiers. The order is important modifier elements to the left are applied before modifier elements to the right.","title":"Combine modifiers"},{"location":"general/modifier/#some-modifiers","text":"","title":"Some Modifiers"},{"location":"general/modifier/#modifiernone","text":"This can be used as a default parameter.","title":"Modifier.None"},{"location":"general/modifier/#modifierpreferredheight","text":"Modifies the height of a Compose UI layout element.","title":"Modifier.preferredHeight()"},{"location":"general/modifier/#modifierpreferredwidth","text":"Modifies the width of a Compose UI layout element.","title":"Modifier.preferredWidth()"},{"location":"general/modifier/#modifierpreferredsize","text":"Modifies the width and height of a Compose UI layout element together","title":"Modifier.preferredSize()"},{"location":"general/modifier/#modifierpadding","text":"You can use Modifier.padding to set padding to composables that take a modifier as an argument. @Composable fun PaddingDemo () { Column { Text ( \"TextWithoutPadding\" ) Column ( modifier = Modifier . padding ( start = 80. dp )){ Text ( \"TextWith80dpOnlyLeftPadding\" ) } Column ( Modifier . padding ( all = 80. dp )){ Text ( \"TextWith80dpPadding\" ) } } }","title":"Modifier.padding()"},{"location":"general/providers/","text":"Providers \u00b6 Providers are used to provide a value for an Ambient","title":"Providers"},{"location":"general/providers/#providers","text":"Providers are used to provide a value for an Ambient","title":"Providers"},{"location":"general/roadmap/","text":"Roadmap \u00b6 Source: https://www.youtube.com/watch?v=U5BwfqBpiWU&feature=youtu.be&t=1324 Jetpack Compose is probably production ready in 2021","title":"Roadmap"},{"location":"general/roadmap/#roadmap","text":"Source: https://www.youtube.com/watch?v=U5BwfqBpiWU&feature=youtu.be&t=1324 Jetpack Compose is probably production ready in 2021","title":"Roadmap"},{"location":"general/state/","text":"Compose State \u00b6 Define a state \u00b6 val textState = mutableStateOf(\u201cHello\u201d) You can use the mutableStateOf function to create a mutable state. Example \u00b6 In this example we will create a composable with a Text and a Button. On a click on the button, the count state will go up and the text of Text will be updated. Initial state: After Button click: @Composable fun StateDemo (){ val countState = remember { mutableStateOf ( 0 ) } Column { Button ( backgroundColor = MaterialTheme . colors . secondary , onClick = { countState . value ++ }) { Text ( \"count up\" ) } Text ( \"You have clicked the Button \" + countState . value . toString () + \" times\" ) } } val countState = remember { mutableStateOf ( 0 ) } Here we define the state for the click counter with mutableStateOf(0) . 0 will be the initial value. Because 0 is an Int, the counterState will only allow values which are Int. remember is used to remember the countstate. Without remember, every time the value of countstate would change, the StateDemo Composable will be recomposed and your state will also get recreated with the initial value. When you use remember it will remember the last value and not be recreated. countState . value With the value property you can get/set the value of the counterstate. In the onClick() function of the Button, the value will be incremented. The Text shows the value of the counterstate. When counterstate is changed, \u201cText\u201d will also change.","title":"State"},{"location":"general/state/#compose-state","text":"","title":"Compose State"},{"location":"general/state/#define-a-state","text":"val textState = mutableStateOf(\u201cHello\u201d) You can use the mutableStateOf function to create a mutable state.","title":"Define a state"},{"location":"general/state/#example","text":"In this example we will create a composable with a Text and a Button. On a click on the button, the count state will go up and the text of Text will be updated. Initial state: After Button click: @Composable fun StateDemo (){ val countState = remember { mutableStateOf ( 0 ) } Column { Button ( backgroundColor = MaterialTheme . colors . secondary , onClick = { countState . value ++ }) { Text ( \"count up\" ) } Text ( \"You have clicked the Button \" + countState . value . toString () + \" times\" ) } } val countState = remember { mutableStateOf ( 0 ) } Here we define the state for the click counter with mutableStateOf(0) . 0 will be the initial value. Because 0 is an Int, the counterState will only allow values which are Int. remember is used to remember the countstate. Without remember, every time the value of countstate would change, the StateDemo Composable will be recomposed and your state will also get recreated with the initial value. When you use remember it will remember the last value and not be recreated. countState . value With the value property you can get/set the value of the counterstate. In the onClick() function of the Button, the value will be incremented. The Text shows the value of the counterstate. When counterstate is changed, \u201cText\u201d will also change.","title":"Example"},{"location":"general/preview/preview/","text":"Preview \u00b6 Preview \u00b6 You can use the @Preview annotation to preview compose functions inside Android Studio. Preview can not be used on Composables that have parameters without a default parameter. @Preview @Composable fun TextDemo (){ Text ( \"Hello\" ) } @Preview ( name = \"MyPreviewName\" ) @Composable fun TextDemo2 (){ Text ( \"Hello\" ) } Android Studio Preview","title":"Preview"},{"location":"general/preview/preview/#preview","text":"","title":"Preview"},{"location":"general/preview/preview/#preview_1","text":"You can use the @Preview annotation to preview compose functions inside Android Studio. Preview can not be used on Composables that have parameters without a default parameter. @Preview @Composable fun TextDemo (){ Text ( \"Hello\" ) } @Preview ( name = \"MyPreviewName\" ) @Composable fun TextDemo2 (){ Text ( \"Hello\" ) } Android Studio Preview","title":"Preview"},{"location":"general/preview/previewparameter/","text":"PreviewParameter \u00b6 You can use @PreviewParameter to provide sample data for your Composables. Let\u2019s say you have the following Composable and you want to generate a preview. data class User ( val name : String , val age : Int ) @Composable fun UserInfo ( user : User ) { Text ( user . name + \" \" + user . age ) } Because UserInfo needs a User you can\u2019t directly use @Preview. One way is to wrap your Composable in a Composable that provides a User @Preview @Composable fun UserPreview () { UserInfo ( user = User ( \"Jens\" , 31 )) } An other way is to use @PreviewParameter on the parameter. With PreviewParameter you can set a class which will provide values for the needed User @Composable fun UserInfo ( @PreviewParameter ( SampleUserProvider :: class ) user : User ) { Text ( user . name + \" \" + user . age ) } Create PreviewParameterProvider \u00b6 SampleUserProvider::class will be the class which provides a User. To create a PreviewParameterProvider you need to implement the interface PreviewParameterProvider. The interface has two properties. values is a sequence of your sample data. count is the number of elements of values class SampleUserProvider : PreviewParameterProvider < User > { override val values = sequenceOf ( User ( \"Jens\" , 31 ), User ( \"Jim\" , 44 )) override val count : Int = values . count () } Use PreviewParameterProvider \u00b6 You can annotate your parameter with @PreviewParameter and the class which provides the sample data. @Preview @Composable fun UserInfo ( @PreviewParameter ( SampleUserProvider :: class ) user : User ) { Text ( user . name + \" \" + user . age ) } Now Android Studio will generate a preview of the Composable for every value that your provider provides. You can limit the amount of previews by settings a limit to PreviewParameter. @PreviewParameter ( SampleUserProvider :: class , 1 )","title":"PreviewParameter"},{"location":"general/preview/previewparameter/#previewparameter","text":"You can use @PreviewParameter to provide sample data for your Composables. Let\u2019s say you have the following Composable and you want to generate a preview. data class User ( val name : String , val age : Int ) @Composable fun UserInfo ( user : User ) { Text ( user . name + \" \" + user . age ) } Because UserInfo needs a User you can\u2019t directly use @Preview. One way is to wrap your Composable in a Composable that provides a User @Preview @Composable fun UserPreview () { UserInfo ( user = User ( \"Jens\" , 31 )) } An other way is to use @PreviewParameter on the parameter. With PreviewParameter you can set a class which will provide values for the needed User @Composable fun UserInfo ( @PreviewParameter ( SampleUserProvider :: class ) user : User ) { Text ( user . name + \" \" + user . age ) }","title":"PreviewParameter"},{"location":"general/preview/previewparameter/#create-previewparameterprovider","text":"SampleUserProvider::class will be the class which provides a User. To create a PreviewParameterProvider you need to implement the interface PreviewParameterProvider. The interface has two properties. values is a sequence of your sample data. count is the number of elements of values class SampleUserProvider : PreviewParameterProvider < User > { override val values = sequenceOf ( User ( \"Jens\" , 31 ), User ( \"Jim\" , 44 )) override val count : Int = values . count () }","title":"Create PreviewParameterProvider"},{"location":"general/preview/previewparameter/#use-previewparameterprovider","text":"You can annotate your parameter with @PreviewParameter and the class which provides the sample data. @Preview @Composable fun UserInfo ( @PreviewParameter ( SampleUserProvider :: class ) user : User ) { Text ( user . name + \" \" + user . age ) } Now Android Studio will generate a preview of the Composable for every value that your provider provides. You can limit the amount of previews by settings a limit to PreviewParameter. @PreviewParameter ( SampleUserProvider :: class , 1 )","title":"Use PreviewParameterProvider"},{"location":"layout/column/","text":"Column \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A Column will show each children below the previous children. It\u2019s similar to a LinearLayout with vertical orientation. @Composable fun ColumnExample () { Column { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } See also: \u00b6 Official Docs Compose Academy/Column","title":"Column"},{"location":"layout/column/#column","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A Column will show each children below the previous children. It\u2019s similar to a LinearLayout with vertical orientation. @Composable fun ColumnExample () { Column { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } }","title":"Column"},{"location":"layout/column/#see-also","text":"Official Docs Compose Academy/Column","title":"See also:"},{"location":"layout/constraintlayout/","text":"ConstraintLayout \u00b6 Info This is the API of version dev09. Newer versions may have a different one A ConstraintLayout in Compose is similar to a ConstraintLayout from the classic Android View System A ConstraintLayout requires a ConstraintSet as parameter. In the ConstraintSet all constraints of the layout has to be declared. children will set the children of the layout Simple ConstraintLayout \u00b6 @Composable fun SimpleConstraintLayout (){ ConstraintLayout ( constraintSet = ConstraintSet {}) { Text ( \"Text1\" ) } } This is a ConstraintLayout that just shows a text composable. The ConstraintSet is empty. Align a ConstraintLayout child \u00b6 Let\u2019s align the text composable created above, to the right end of it\u2019s a parent layout. First we need to create a LayoutTag for the Text. The LayoutTag will be added as a modifier. The tag name used inside the LayoutTag, will be used as a reference inside the ConstraintSet. Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) Inside the ConstraintSet, you have to add a tag() with the same name like your LayoutTag ConstraintSet { val text1 = tag ( \"text1\" ) } Now you can apply constraints to this tag. With constrainTo you can set a composable to another one. ConstraintSet { val text1 = tag ( \"text1\" ) text1 . apply { right constrainTo parent . right }} @Composable fun FinalConstraintLayout (){ ConstraintLayout ( constraintSet = ConstraintSet { val text1 = tag ( \"text1\" ) text1 . apply { right constrainTo parent . right } }) { Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) } } Now the right of your text will be constraint to the right of your parent composable. Create a guideline \u00b6 A guideline can used as an invisible line to which you can constrain your composables. The example below shows how to create a guideline at 50% of the height of the ConstraintLayout and align a Text to it. There are similar functions for guidelines from left, right and bottom. @Composable fun TopGuideLineExample (){ ConstraintLayout ( constraintSet = ConstraintSet { val half = createGuidelineFromTop ( percent = 0.5f ) val text1 = tag ( \"text1\" ) text1 . apply { top constrainTo half } }) { Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) } }","title":"ConstraintLayout"},{"location":"layout/constraintlayout/#constraintlayout","text":"Info This is the API of version dev09. Newer versions may have a different one A ConstraintLayout in Compose is similar to a ConstraintLayout from the classic Android View System A ConstraintLayout requires a ConstraintSet as parameter. In the ConstraintSet all constraints of the layout has to be declared. children will set the children of the layout","title":"ConstraintLayout"},{"location":"layout/constraintlayout/#simple-constraintlayout","text":"@Composable fun SimpleConstraintLayout (){ ConstraintLayout ( constraintSet = ConstraintSet {}) { Text ( \"Text1\" ) } } This is a ConstraintLayout that just shows a text composable. The ConstraintSet is empty.","title":"Simple ConstraintLayout"},{"location":"layout/constraintlayout/#align-a-constraintlayout-child","text":"Let\u2019s align the text composable created above, to the right end of it\u2019s a parent layout. First we need to create a LayoutTag for the Text. The LayoutTag will be added as a modifier. The tag name used inside the LayoutTag, will be used as a reference inside the ConstraintSet. Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) Inside the ConstraintSet, you have to add a tag() with the same name like your LayoutTag ConstraintSet { val text1 = tag ( \"text1\" ) } Now you can apply constraints to this tag. With constrainTo you can set a composable to another one. ConstraintSet { val text1 = tag ( \"text1\" ) text1 . apply { right constrainTo parent . right }} @Composable fun FinalConstraintLayout (){ ConstraintLayout ( constraintSet = ConstraintSet { val text1 = tag ( \"text1\" ) text1 . apply { right constrainTo parent . right } }) { Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) } } Now the right of your text will be constraint to the right of your parent composable.","title":"Align a ConstraintLayout child"},{"location":"layout/constraintlayout/#create-a-guideline","text":"A guideline can used as an invisible line to which you can constrain your composables. The example below shows how to create a guideline at 50% of the height of the ConstraintLayout and align a Text to it. There are similar functions for guidelines from left, right and bottom. @Composable fun TopGuideLineExample (){ ConstraintLayout ( constraintSet = ConstraintSet { val half = createGuidelineFromTop ( percent = 0.5f ) val text1 = tag ( \"text1\" ) text1 . apply { top constrainTo half } }) { Text ( \"Text1\" , modifier = LayoutTag ( \"text1\" )) } }","title":"Create a guideline"},{"location":"layout/row/","text":"Row \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A Row will show each children next to the previous children. It\u2019 similar to a LinearLayout with horizontal orientation. @Composable fun RowExample () { Row { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } How to align row childrens with equal width \u00b6 @Composable fun RowExample () { Row ( arrangement = Arrangement . SpaceEvenly ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.SpaceEvenly , the children of Row will equal a width. How to align row childrens in center \u00b6 @Composable fun RowExample () { Row ( horizontalArrangement = Arrangement . Center ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.Center , the children of Row will aligned in the center of Row. How to align row childrens at end \u00b6 @Composable fun RowExample () { Row ( horizontalArrangement = Arrangement . End ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.End , the children of Row will aligned at the end of Row. See also: \u00b6 Official Docs Compose Academy/Row","title":"Row"},{"location":"layout/row/#row","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A Row will show each children next to the previous children. It\u2019 similar to a LinearLayout with horizontal orientation. @Composable fun RowExample () { Row { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } }","title":"Row"},{"location":"layout/row/#how-to-align-row-childrens-with-equal-width","text":"@Composable fun RowExample () { Row ( arrangement = Arrangement . SpaceEvenly ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.SpaceEvenly , the children of Row will equal a width.","title":"How to align row childrens with equal width"},{"location":"layout/row/#how-to-align-row-childrens-in-center","text":"@Composable fun RowExample () { Row ( horizontalArrangement = Arrangement . Center ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.Center , the children of Row will aligned in the center of Row.","title":"How to align row childrens in center"},{"location":"layout/row/#how-to-align-row-childrens-at-end","text":"@Composable fun RowExample () { Row ( horizontalArrangement = Arrangement . End ) { Text ( \"Hello World!\" ) Text ( \"Hello World!2\" ) } } Row takes an Arrangement parameter. When you set it to Arrangement.End , the children of Row will aligned at the end of Row.","title":"How to align row childrens at end"},{"location":"layout/row/#see-also","text":"Official Docs Compose Academy/Row","title":"See also:"},{"location":"layout/stack/","text":"Stack \u00b6 The children of the Stack layout will be stacked over each other. You can use the gravity modifier to specify where the composable should be drawn. Info This is the API of version dev16. Newer versions may have a different one @Composable fun StackExample () { Stack () { Text ( \"This text is drawed first\" , modifier = Modifier . gravity ( Alignment . TopCenter )) Box ( Modifier . gravity ( Alignment . TopCenter ) + Modifier . fillMaxHeight () + Modifier . preferredWidth ( 50. dp ), backgroundColor = Color . Blue ) Text ( \"This text is drawed last\" , modifier = Modifier . gravity ( Alignment . Center )) FloatingActionButton ( contentColor = Color . Blue , modifier = Modifier . gravity ( Alignment . BottomEnd ) + Modifier . padding ( 12. dp ), onClick = {} ){ Text ( \"x\" ) } } }","title":"Stack"},{"location":"layout/stack/#stack","text":"The children of the Stack layout will be stacked over each other. You can use the gravity modifier to specify where the composable should be drawn. Info This is the API of version dev16. Newer versions may have a different one @Composable fun StackExample () { Stack () { Text ( \"This text is drawed first\" , modifier = Modifier . gravity ( Alignment . TopCenter )) Box ( Modifier . gravity ( Alignment . TopCenter ) + Modifier . fillMaxHeight () + Modifier . preferredWidth ( 50. dp ), backgroundColor = Color . Blue ) Text ( \"This text is drawed last\" , modifier = Modifier . gravity ( Alignment . Center )) FloatingActionButton ( contentColor = Color . Blue , modifier = Modifier . gravity ( Alignment . BottomEnd ) + Modifier . padding ( 12. dp ), onClick = {} ){ Text ( \"x\" ) } } }","title":"Stack"},{"location":"material/alertdialog/","text":"AlertDialog \u00b6 Info This is the API of version dev09. Newer versions may have a different one @Composable fun AlertDialogSample () { MaterialTheme { Column { val openDialog = state { false } Button ( onClick = { openDialog . value = true }){ Text ( \"Click me\" ) } if ( openDialog . value ) { AlertDialog ( onCloseRequest = { openDialog . value = false }, title = { Text ( \"Dialog Title\" ) }, text = { Text ( \"Here is a text \" ) }, confirmButton = { Button ( onClick = { openDialog . value = false }){ Text ( \"This is the Confirm Button\" ) } }, dismissButton = { Button ( onClick = { openDialog . value = false }){ Text ( \"This is the dismiss Button\" ) } }, buttonLayout = AlertDialogButtonLayout . Stacked ) } } } }","title":"AlertDialog"},{"location":"material/alertdialog/#alertdialog","text":"Info This is the API of version dev09. Newer versions may have a different one @Composable fun AlertDialogSample () { MaterialTheme { Column { val openDialog = state { false } Button ( onClick = { openDialog . value = true }){ Text ( \"Click me\" ) } if ( openDialog . value ) { AlertDialog ( onCloseRequest = { openDialog . value = false }, title = { Text ( \"Dialog Title\" ) }, text = { Text ( \"Here is a text \" ) }, confirmButton = { Button ( onClick = { openDialog . value = false }){ Text ( \"This is the Confirm Button\" ) } }, dismissButton = { Button ( onClick = { openDialog . value = false }){ Text ( \"This is the dismiss Button\" ) } }, buttonLayout = AlertDialogButtonLayout . Stacked ) } } } }","title":"AlertDialog"},{"location":"material/button/","text":"Button \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A Button has a onClick-Function. You can add a Text-Composable or any other composables as child elements of the Button. @Composable fun ButtonExample () { Button ( onClick = { /* Do something! */ }, backgroundColor = Color . Red ) { Text ( \"Button\" ) } } See also: \u00b6 Official Docs Compose Academy/Button Learn-Jetpack-Compose-By-Example/ButtonActivity","title":"Button"},{"location":"material/button/#button","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A Button has a onClick-Function. You can add a Text-Composable or any other composables as child elements of the Button. @Composable fun ButtonExample () { Button ( onClick = { /* Do something! */ }, backgroundColor = Color . Red ) { Text ( \"Button\" ) } }","title":"Button"},{"location":"material/button/#see-also","text":"Official Docs Compose Academy/Button Learn-Jetpack-Compose-By-Example/ButtonActivity","title":"See also:"},{"location":"material/card/","text":"Card \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one Card is the implementation of a CardView in Compose @Composable fun CardDemo (){ Card ( Modifier . fillMaxWidth (). padding ( 8. dp ), elevation = 8. dp ){ Text ( \"This is a Card\" ) } } See also: \u00b6 Material.io","title":"Card"},{"location":"material/card/#card","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one Card is the implementation of a CardView in Compose @Composable fun CardDemo (){ Card ( Modifier . fillMaxWidth (). padding ( 8. dp ), elevation = 8. dp ){ Text ( \"This is a Card\" ) } }","title":"Card"},{"location":"material/card/#see-also","text":"Material.io","title":"See also:"},{"location":"material/checkbox/","text":"Checkbox \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one @Composable fun CheckBoxDemo () { val checkedState = remember { mutableStateOf ( true ) } Checkbox ( checked = checkedState . value , onCheckedChange = { checkedState . value = it } ) } See also: \u00b6 Compose Academy/Checkbox","title":"Checkbox"},{"location":"material/checkbox/#checkbox","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one @Composable fun CheckBoxDemo () { val checkedState = remember { mutableStateOf ( true ) } Checkbox ( checked = checkedState . value , onCheckedChange = { checkedState . value = it } ) }","title":"Checkbox"},{"location":"material/checkbox/#see-also","text":"Compose Academy/Checkbox","title":"See also:"},{"location":"material/modaldrawer/","text":"ModalDrawerLayout \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one With a ModalDrawerLayout you can create a navigation drawer. You can define a drawer state and an onStateChange function. You define the content of the drawer with drawerContent and the rest of your layout in bodyContent @Composable fun ModalDrawerLayoutSample () { val drawerState = rememberDrawerState ( DrawerValue . Closed ) ModalDrawerLayout ( drawerState = drawerState , drawerContent = { Column { Text ( \"Text in Drawer\" ) Button ( onClick = { drawerState . close () }) { Text ( \"Close Drawer\" ) } } }, bodyContent = { Column { Text ( \"Text in Bodycontext\" ) Button ( onClick = { drawerState . open () }) { Text ( \"Click to open\" ) } } } ) }","title":"ModalDrawerLayout"},{"location":"material/modaldrawer/#modaldrawerlayout","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one With a ModalDrawerLayout you can create a navigation drawer. You can define a drawer state and an onStateChange function. You define the content of the drawer with drawerContent and the rest of your layout in bodyContent @Composable fun ModalDrawerLayoutSample () { val drawerState = rememberDrawerState ( DrawerValue . Closed ) ModalDrawerLayout ( drawerState = drawerState , drawerContent = { Column { Text ( \"Text in Drawer\" ) Button ( onClick = { drawerState . close () }) { Text ( \"Close Drawer\" ) } } }, bodyContent = { Column { Text ( \"Text in Bodycontext\" ) Button ( onClick = { drawerState . open () }) { Text ( \"Click to open\" ) } } } ) }","title":"ModalDrawerLayout"},{"location":"material/radiobutton/","text":"RadioButton \u00b6 Info This is the API of version dev16. Newer versions may have a different one @Composable fun RadioGroupSample () { val radioOptions = listOf ( \"A\" , \"B\" , \"C\" ) val ( selectedOption , onOptionSelected ) = state { radioOptions [ 1 ] } Column { radioOptions . forEach { text -> Row ( Modifier . fillMaxWidth () . selectable ( selected = ( text == selectedOption ), onClick = { onOptionSelected ( text ) } ) . padding ( horizontal = 16. dp ) ) { RadioButton ( selected = ( text == selectedOption ), onClick = { onOptionSelected ( text ) } ) Text ( text = text , style = MaterialTheme . typography . body1 . merge (), modifier = Modifier . padding ( start = 16. dp ) ) } } } }","title":"RadioButton"},{"location":"material/radiobutton/#radiobutton","text":"Info This is the API of version dev16. Newer versions may have a different one @Composable fun RadioGroupSample () { val radioOptions = listOf ( \"A\" , \"B\" , \"C\" ) val ( selectedOption , onOptionSelected ) = state { radioOptions [ 1 ] } Column { radioOptions . forEach { text -> Row ( Modifier . fillMaxWidth () . selectable ( selected = ( text == selectedOption ), onClick = { onOptionSelected ( text ) } ) . padding ( horizontal = 16. dp ) ) { RadioButton ( selected = ( text == selectedOption ), onClick = { onOptionSelected ( text ) } ) Text ( text = text , style = MaterialTheme . typography . body1 . merge (), modifier = Modifier . padding ( start = 16. dp ) ) } } } }","title":"RadioButton"},{"location":"material/radiogroup/","text":"RadioButton \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one @Composable fun RadioGroupSample () { val radioOptions = listOf ( \"A\" , \"B\" , \"C\" ) val ( selectedOption , onOptionSelected ) = state { radioOptions [ 1 ] } Column { radioOptions . forEach { text -> Row ( Modifier . fillMaxWidth () . selectable ( selected = ( text == selectedOption ), onClick = { onOptionSelected ( text ) } ) . padding ( horizontal = 16. dp ) ) { RadioButton ( selected = ( text == selectedOption ), onClick = { onOptionSelected ( text ) } ) Text ( text = text , style = MaterialTheme . typography . body1 . merge (), modifier = Modifier . padding ( start = 16. dp ) ) } } } }","title":"RadioGroup"},{"location":"material/radiogroup/#radiobutton","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one @Composable fun RadioGroupSample () { val radioOptions = listOf ( \"A\" , \"B\" , \"C\" ) val ( selectedOption , onOptionSelected ) = state { radioOptions [ 1 ] } Column { radioOptions . forEach { text -> Row ( Modifier . fillMaxWidth () . selectable ( selected = ( text == selectedOption ), onClick = { onOptionSelected ( text ) } ) . padding ( horizontal = 16. dp ) ) { RadioButton ( selected = ( text == selectedOption ), onClick = { onOptionSelected ( text ) } ) Text ( text = text , style = MaterialTheme . typography . body1 . merge (), modifier = Modifier . padding ( start = 16. dp ) ) } } } }","title":"RadioButton"},{"location":"material/scaffold/","text":"Scaffold \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A Scaffold is a layout which implements the basic material design layout structure. You can add things like a TopBar, BottomBar, FAB or a Drawer. @Composable fun ScaffoldDemo () { val materialBlue700 = Color ( 0 xFF1976D2 ) val scaffoldState = rememberScaffoldState ( rememberDrawerState ( DrawerValue . Open )) Scaffold ( scaffoldState = scaffoldState , topBar = { TopAppBar ( title = { Text ( \"TopAppBar\" )}, backgroundColor = materialBlue700 ) }, floatingActionButtonPosition = FabPosition . End , floatingActionButton = { FloatingActionButton ( onClick = {}){ Text ( \"X\" ) } }, drawerContent = { Text ( text = \"drawerContent\" ) }, bodyContent = { Text ( \"BodyContent\" ) }, bottomBar = { BottomAppBar ( backgroundColor = materialBlue700 ) { Text ( \"BottomAppBar\" ) } } ) } scaffoldState \u00b6 With the scaffoldState you can set the opening state of the drawer(DrawerState.Opened or DrawerState.Closed) topBar \u00b6 Here you can set the part of your layout that should be displayed on top of the screen. You can use it for things like a toolbar. You can set any Composable, but TopAppBar is already made for this usecase. floatingActionButton \u00b6 Here you can add FloatingActionButton. You can set any Composable, but FloatingActionButton is already made for this usecase floatingActionButtonPosition \u00b6 When you have added a FAB, you can use this specify the position of it. The default position is at the end of your layout. drawerContent \u00b6 Here you can set the content of your drawer. bodyContent \u00b6 This is the primary content of the scaffold. You can add any Composable here. bottomBar \u00b6 Here you can set the part of your layout is on bottom of the screen. You can set any Composable, but BottomAppBar is already made for this usecase.","title":"Scaffold"},{"location":"material/scaffold/#scaffold","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one A Scaffold is a layout which implements the basic material design layout structure. You can add things like a TopBar, BottomBar, FAB or a Drawer. @Composable fun ScaffoldDemo () { val materialBlue700 = Color ( 0 xFF1976D2 ) val scaffoldState = rememberScaffoldState ( rememberDrawerState ( DrawerValue . Open )) Scaffold ( scaffoldState = scaffoldState , topBar = { TopAppBar ( title = { Text ( \"TopAppBar\" )}, backgroundColor = materialBlue700 ) }, floatingActionButtonPosition = FabPosition . End , floatingActionButton = { FloatingActionButton ( onClick = {}){ Text ( \"X\" ) } }, drawerContent = { Text ( text = \"drawerContent\" ) }, bodyContent = { Text ( \"BodyContent\" ) }, bottomBar = { BottomAppBar ( backgroundColor = materialBlue700 ) { Text ( \"BottomAppBar\" ) } } ) }","title":"Scaffold"},{"location":"material/scaffold/#scaffoldstate","text":"With the scaffoldState you can set the opening state of the drawer(DrawerState.Opened or DrawerState.Closed)","title":"scaffoldState"},{"location":"material/scaffold/#topbar","text":"Here you can set the part of your layout that should be displayed on top of the screen. You can use it for things like a toolbar. You can set any Composable, but TopAppBar is already made for this usecase.","title":"topBar"},{"location":"material/scaffold/#floatingactionbutton","text":"Here you can add FloatingActionButton. You can set any Composable, but FloatingActionButton is already made for this usecase","title":"floatingActionButton"},{"location":"material/scaffold/#floatingactionbuttonposition","text":"When you have added a FAB, you can use this specify the position of it. The default position is at the end of your layout.","title":"floatingActionButtonPosition"},{"location":"material/scaffold/#drawercontent","text":"Here you can set the content of your drawer.","title":"drawerContent"},{"location":"material/scaffold/#bodycontent","text":"This is the primary content of the scaffold. You can add any Composable here.","title":"bodyContent"},{"location":"material/scaffold/#bottombar","text":"Here you can set the part of your layout is on bottom of the screen. You can set any Composable, but BottomAppBar is already made for this usecase.","title":"bottomBar"},{"location":"material/slider/","text":"Slider \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one \u201cSliders allow users to make selections from a range of values.\u201d @Composable fun MySliderDemo () { var sliderPosition by remember { mutableStateOf ( 0f ) } Text ( text = sliderPosition . toString ()) Slider ( value = sliderPosition , onValueChange = { sliderPosition = it }) } See also: \u00b6 Material.io","title":"Slider"},{"location":"material/slider/#slider","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one \u201cSliders allow users to make selections from a range of values.\u201d @Composable fun MySliderDemo () { var sliderPosition by remember { mutableStateOf ( 0f ) } Text ( text = sliderPosition . toString ()) Slider ( value = sliderPosition , onValueChange = { sliderPosition = it }) }","title":"Slider"},{"location":"material/slider/#see-also","text":"Material.io","title":"See also:"},{"location":"material/snackbar/","text":"Snackbar \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one \u201cSnackbars provide brief messages about app processes at the bottom of the screen.\u201d @Composable fun SnackbarDemo () { Column { val snackbarVisibleState = remember { mutableStateOf ( false ) } Button ( onClick = { snackbarVisibleState . value = ! snackbarVisibleState . value }) { if ( snackbarVisibleState . value ) { Text ( \"Hide Snackbar\" ) } else { Text ( \"Show Snackbar\" ) } } if ( snackbarVisibleState . value ) { Snackbar ( text = { Text ( text = \"This is a snackbar!\" ) }, action = { Button ( onClick = {}) { Text ( \"MyAction\" ) } }, modifier = Modifier . padding ( 8. dp ) ) } } }","title":"Snackbar"},{"location":"material/snackbar/#snackbar","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one \u201cSnackbars provide brief messages about app processes at the bottom of the screen.\u201d @Composable fun SnackbarDemo () { Column { val snackbarVisibleState = remember { mutableStateOf ( false ) } Button ( onClick = { snackbarVisibleState . value = ! snackbarVisibleState . value }) { if ( snackbarVisibleState . value ) { Text ( \"Hide Snackbar\" ) } else { Text ( \"Show Snackbar\" ) } } if ( snackbarVisibleState . value ) { Snackbar ( text = { Text ( text = \"This is a snackbar!\" ) }, action = { Button ( onClick = {}) { Text ( \"MyAction\" ) } }, modifier = Modifier . padding ( 8. dp ) ) } } }","title":"Snackbar"},{"location":"material/switch/","text":"Switch \u00b6 Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one @Composable fun SwitchDemo () { val checkedState = remember { mutableStateOf ( true ) } Switch ( checked = checkedState . value , onCheckedChange = { checkedState . value = it } ) }","title":"Switch"},{"location":"material/switch/#switch","text":"Info This is the API of version 1.0.0-alpha02. Newer versions may have a different one @Composable fun SwitchDemo () { val checkedState = remember { mutableStateOf ( true ) } Switch ( checked = checkedState . value , onCheckedChange = { checkedState . value = it } ) }","title":"Switch"}]}